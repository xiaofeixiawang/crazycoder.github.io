<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Byte Ants</title>
  <subtitle>Keep on going, never give up!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.byteants.com/"/>
  <updated>2016-05-29T01:59:58.000Z</updated>
  <id>http://www.byteants.com/</id>
  
  <author>
    <name>Yifei Wang, Shizhou Liu, Tong Zhao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Memory Management</title>
    <link href="http://www.byteants.com/2016/05/28/studying%20notes.operating%20system.chapter%207/"/>
    <id>http://www.byteants.com/2016/05/28/studying notes.operating system.chapter 7/</id>
    <published>2016-05-28T07:00:00.000Z</published>
    <updated>2016-05-29T01:59:58.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7241/27283326326_9cf3700f91.jpg&quot; width=&quot;500&quot; height=&quot;341&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;store data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;primary storage&lt;/li&gt;
&lt;li&gt;secondary storage&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;memory management concerns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mapping virtual address to real ones&lt;/li&gt;
&lt;li&gt;determining which address is valid&lt;/li&gt;
&lt;li&gt;keep track of which real object are mapped into virtual address&lt;/li&gt;
&lt;li&gt;deciding what to keep in primary storage and what to fetch from else where&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;aim of address space:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;protect processes from one another&lt;/li&gt;
&lt;li&gt;protect OS from user process&lt;/li&gt;
&lt;li&gt;provide large memory illusion,sharing,new abstraction(pipes, memory-mapped files)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In address space use virtual address, hardware use physical address, OS manage physical address&lt;/p&gt;
&lt;p&gt;memory management unit(MMU):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one level of indirection&lt;/li&gt;
&lt;li&gt;address out of CPU inner core is virtual&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7711/26710117883_0985bdf784.jpg&quot; width=&quot;456&quot; height=&quot;292&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MMU translate virtual address into physical address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7328/26710117973_5febebb30d.jpg&quot; width=&quot;500&quot; height=&quot;236&quot;&gt;&lt;/p&gt;
&lt;p&gt;memory fence(single user process):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if user program access OS area, hardware generate a trap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7389/26710118073_8af9a7ca3b.jpg&quot; width=&quot;500&quot; height=&quot;226&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;programmer divide user area to overlay and resident, keep track of which overlay in physical memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7094/26710118153_233718be6c.jpg&quot; width=&quot;500&quot; height=&quot;198&quot;&gt;&lt;/p&gt;
&lt;p&gt;OS maintain 2 registers for each process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;base register: start of physical memory&lt;/li&gt;
&lt;li&gt;bounds register: address space size&lt;/li&gt;
&lt;li&gt;address relative to base register&lt;/li&gt;
&lt;li&gt;memory reference independent of base, position independence&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7300/26710118323_469d7d2c5f.jpg&quot; width=&quot;500&quot; height=&quot;208&quot;&gt;&lt;/p&gt;
&lt;p&gt;segmentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have base and bounds registers per segment in MMU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7311/26710118433_9da3cf37e0.jpg&quot; width=&quot;500&quot; height=&quot;285&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have access control bits per segment in MMU&lt;/li&gt;
&lt;li&gt;segments could be shared in physical memory&lt;/li&gt;
&lt;li&gt;segmentation fault: virtual address not in range of any base-bounds register&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7328/26710118493_df4e229a3c.jpg&quot; width=&quot;500&quot; height=&quot;291&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;memory mapped file: map a file(or part of it) into a segment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7409/26710118623_c1be21551b.jpg&quot; width=&quot;500&quot; height=&quot;300&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shared mapping: all processes share same pages in memory, should share text region&lt;/li&gt;
&lt;li&gt;private mapping: initially share data region， when modified by a process, it gets a new and private copy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7239/26710118753_b1d8df44ba.jpg&quot; width=&quot;500&quot; height=&quot;291&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy on write(COW): process gets private copy of page after performing a write for the first time&lt;/li&gt;
&lt;li&gt;use a validity bit per segment indicating its existance in physical memory(segment can be swapped out, can start with all segments as swapped out)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7408/26710118843_c5b17d4d37.jpg&quot; width=&quot;500&quot; height=&quot;285&quot;&gt;&lt;/p&gt;
&lt;p&gt;address space representation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contains many as_region(text, data, bss+heap, mapped file, stack)&lt;/li&gt;
&lt;li&gt;as_region contains: start address, length, access permissioins, shared/private, file object&lt;/li&gt;
&lt;li&gt;every segment need a disk image to swapped out, some kernel memory can be locked down to prevent swapped out&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7113/27283326406_18334b2c48.jpg&quot; width=&quot;500&quot; height=&quot;166&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hardware-Support-for-Virtual-Memory&quot;&gt;&lt;a href=&quot;#Hardware-Support-for-Virtual-Memory&quot; class=&quot;headerlink&quot; title=&quot;Hardware Support for Virtual Memory&quot;&gt;&lt;/a&gt;Hardware Support for Virtual Memory&lt;/h2&gt;&lt;h3 id=&quot;Forware-Mapped-Page-Tables&quot;&gt;&lt;a href=&quot;#Forware-Mapped-Page-Tables&quot; class=&quot;headerlink&quot; title=&quot;Forware-Mapped Page Tables&quot;&gt;&lt;/a&gt;Forware-Mapped Page Tables&lt;/h3&gt;&lt;p&gt;structuring virtual memory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;segmentation: divide address space into variable-size segments, have external fragmentation, first-fit is slow&lt;/li&gt;
&lt;li&gt;paging: divide address space into fixed-size pages, have internal fragmentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;paging: page table(memory map) to map virtual to physical pages&lt;/p&gt;
&lt;p&gt;page frame: maintain information about physical pages, one-to-one mapping&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;forward lookup: given virtual address, find page frame&lt;/li&gt;
&lt;li&gt;reverse lookup: given page frame, find process and virtual address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7323/26710118883_8e3b449b3c.jpg&quot; width=&quot;380&quot; height=&quot;418&quot;&gt;&lt;/p&gt;
&lt;p&gt;two-level page table:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;entry contains validity, modified, reference, access protection bits and physical page&lt;/li&gt;
&lt;li&gt;first 20 bits of virtual address used as page number, last 12 bits used as offset in physical page&lt;/li&gt;
&lt;li&gt;analogous to base and bounds registers&lt;/li&gt;
&lt;li&gt;part of process context, sit in physical memory&lt;/li&gt;
&lt;li&gt;physical address of page table is in CR3 register&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7066/26710119023_1750406930.jpg&quot; width=&quot;500&quot; height=&quot;184&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7448/26710119123_ee6c08cb51.jpg&quot; width=&quot;500&quot; height=&quot;231&quot;&gt;&lt;/p&gt;
&lt;p&gt;page-table size too big:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hash page tables or forward-mapped page tables&lt;/li&gt;
&lt;li&gt;virtual linear page tables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;paged segmentation: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4-bit seg#, decide which segment table&lt;/li&gt;
&lt;li&gt;16-bit page#, decide which page table&lt;/li&gt;
&lt;li&gt;12-bit offset&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7065/26710119193_0f974bdb6b.jpg&quot; width=&quot;500&quot; height=&quot;278&quot;&gt;&lt;/p&gt;
&lt;p&gt;forward-mapped(multilevel) page table:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10-bit page dir#, decide which page dir table&lt;/li&gt;
&lt;li&gt;10-bit page#, decide which page table&lt;/li&gt;
&lt;li&gt;12-bit offset&lt;/li&gt;
&lt;li&gt;two physical memory access to map virtual address to physical address&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7239/26710119303_c56084b94d.jpg&quot; width=&quot;500&quot; height=&quot;279&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Linear-Page-Tables&quot;&gt;&lt;a href=&quot;#Linear-Page-Tables&quot; class=&quot;headerlink&quot; title=&quot;Linear Page Tables&quot;&gt;&lt;/a&gt;Linear Page Tables&lt;/h3&gt;&lt;p&gt;linear page table:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2-bit space, 00 and 01 means the entry points to virtual address space, should map again with prefix 10. 10 means the entry points to physical address space &lt;/li&gt;
&lt;li&gt;21-bit virtual page number&lt;/li&gt;
&lt;li&gt;9-bit offset&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7314/26710119363_e1e2414f7b.jpg&quot; width=&quot;500&quot; height=&quot;207&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reduce size requirements with partial page table, use length register&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7336/26710119483_8b4fa6f21d.jpg&quot; width=&quot;430&quot; height=&quot;395&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not suitable for multithread programming&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Hashes-Page-Table&quot;&gt;&lt;a href=&quot;#Hashes-Page-Table&quot; class=&quot;headerlink&quot; title=&quot;Hashes Page Table&quot;&gt;&lt;/a&gt;Hashes Page Table&lt;/h3&gt;&lt;p&gt;hashed page table:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;process page# through hash function, points to a linked list, find right PT entry by comparing tag with page# through list&lt;/li&gt;
&lt;li&gt;only allocated pages are present, works well for sparcely allocated address space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7400/26710119573_00a08a8949.jpg&quot; width=&quot;500&quot; height=&quot;277&quot;&gt;&lt;/p&gt;
&lt;p&gt;clustered page table: similar to hashed page table, each listnode contain 8 PT entry(reducing overhead)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7568/26710119653_1a5a0afa8f.jpg&quot; width=&quot;500&quot; height=&quot;290&quot;&gt;&lt;/p&gt;
&lt;p&gt;inverted page table: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all process share a big page table, indexed by physical page number&lt;/li&gt;
&lt;li&gt;each entry contains: PID, page number, physical page number&lt;/li&gt;
&lt;li&gt;map page number to physical page number through hash function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7303/26710119733_3671c6408f.jpg&quot; width=&quot;500&quot; height=&quot;260&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Translation-Lookaside-Buffer&quot;&gt;&lt;a href=&quot;#Translation-Lookaside-Buffer&quot; class=&quot;headerlink&quot; title=&quot;Translation Lookaside Buffer&quot;&gt;&lt;/a&gt;Translation Lookaside Buffer&lt;/h3&gt;&lt;p&gt;translation lookaside buffer(TLB): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cache page table entries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7746/26710119783_bc18d18761.jpg&quot; width=&quot;500&quot; height=&quot;320&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when switching to different process, must flush entrie TLB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7134/26710117793_bdc466d35a.jpg&quot; width=&quot;500&quot; height=&quot;318&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when an entry is modified, OS must flush corresponding TLB entry&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7017/26710119843_a834e1a1ea.jpg&quot; width=&quot;500&quot; height=&quot;314&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;14-bit tag, 6-bit key(how many lines the TLB has), 12-bit offset&lt;/li&gt;
&lt;li&gt;amount of set-associativity is array size in each line, two-way set-associative store two entry in each line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7595/26710117723_9242b155fd.jpg&quot; width=&quot;500&quot; height=&quot;129&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tag in virtual address is compared against all tags in line simultaneously&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TLB vs page fault:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;penalty for TLB miss is O(1) memory access&lt;/li&gt;
&lt;li&gt;penalty for page fault is trap into kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TLBs and multiprocessors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one processor can modify a mapping cached in TLB of another processor&lt;/li&gt;
&lt;li&gt;before modifying mapping, processor 1 must shoot-down TLB of processor 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7297/26710117653_d302d9c767.jpg&quot; width=&quot;500&quot; height=&quot;298&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; all processors i sharing address space:interrupt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; all processors i sharing address space:&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(noted[i]==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;modify_page_table();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;update_or_flush_tlb();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;down[me]=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//shootee interrupt handler&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;receive_interrupt_from_processor j&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;noted[i]=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(done[j]==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flush_tlb();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;64-Bit-Issues&quot;&gt;&lt;a href=&quot;#64-Bit-Issues&quot; class=&quot;headerlink&quot; title=&quot;64-Bit Issues&quot;&gt;&lt;/a&gt;64-Bit Issues&lt;/h3&gt;&lt;p&gt;x86-64(AMD) virtual address contains 4 page tables: page map table, page directory pointer table, page directory table, page table&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7279/26710117503_354e0d894c.jpg&quot; width=&quot;500&quot; height=&quot;307&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Operating-System-Issues&quot;&gt;&lt;a href=&quot;#Operating-System-Issues&quot; class=&quot;headerlink&quot; title=&quot;Operating System Issues&quot;&gt;&lt;/a&gt;Operating System Issues&lt;/h2&gt;&lt;h3 id=&quot;General-Concerns&quot;&gt;&lt;a href=&quot;#General-Concerns&quot; class=&quot;headerlink&quot; title=&quot;General Concerns&quot;&gt;&lt;/a&gt;General Concerns&lt;/h3&gt;&lt;p&gt;fetch policy: bring in pages on demand(lazy evaluation), defer processing until absolutely have to do it&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7317/27283326886_b4c314ac0f.jpg&quot; width=&quot;500&quot; height=&quot;265&quot;&gt;&lt;/p&gt;
&lt;p&gt;placement policy: put incoming page in first available physical page&lt;/p&gt;
&lt;p&gt;page fault: page table doesn’t have requested address&lt;/p&gt;
&lt;p&gt;solution for page fault:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trap occurs&lt;/li&gt;
&lt;li&gt;find free physical page(OS ask buddy system to allocate pages of physical memory(4KB))&lt;/li&gt;
&lt;li&gt;write page out if no free physical page&lt;/li&gt;
&lt;li&gt;fetch page&lt;/li&gt;
&lt;li&gt;return from trap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;solution to reduce page fault:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prefetching: access to pages is often sequential&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7454/27283326846_14915ca19f.jpg&quot; width=&quot;500&quot; height=&quot;218&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pageout daemon: a thread to continuously look for free pages, can use multiple&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7193/27283326836_11eb311956.jpg&quot; width=&quot;500&quot; height=&quot;313&quot;&gt;&lt;/p&gt;
&lt;p&gt;pageout daemon wants to free up a modified/dirty page:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find which process the page belongs to&lt;/li&gt;
&lt;li&gt;look at memory map and find corresponding backing store, write back page content to disk&lt;/li&gt;
&lt;li&gt;unmap page from corresponding page table&lt;/li&gt;
&lt;li&gt;free page frame&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;replacement policy: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FIFO: first in first out&lt;/li&gt;
&lt;li&gt;LRU: least recently used&lt;/li&gt;
&lt;li&gt;LFU: least frequently used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LRU: reference bit in page table entry is used&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two-handed clock algorithm: two hands scan entry, front hand make reference bit = 0, after enough time, back hand check reference bit, remove page whose bit = 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7511/27283326746_03a39dfb3a.jpg&quot; width=&quot;500&quot; height=&quot;291&quot;&gt;&lt;/p&gt;
&lt;p&gt;manage primary storage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;global allocation: all processes compete for page frames from a single pool&lt;/li&gt;
&lt;li&gt;local allocation: give each participant a minimum amount of storage, leave additional storage available for all to compete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;working-set principle: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WS(P,T) is the set of pages used by process P over time T&lt;/li&gt;
&lt;li&gt;if the amount of space isn’t available, P shouldn’t run and should be swapped out&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Representative-Systems&quot;&gt;&lt;a href=&quot;#Representative-Systems&quot; class=&quot;headerlink&quot; title=&quot;Representative Systems&quot;&gt;&lt;/a&gt;Representative Systems&lt;/h3&gt;&lt;p&gt;memory allocation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user: virtual allocation&lt;/li&gt;
&lt;li&gt;OS kernel: virtual and real allocation&lt;/li&gt;
&lt;li&gt;when allocating page frame for user process, these pages are mapped both into user address space and kernel address space&lt;/li&gt;
&lt;li&gt;OS code and data stay still in address space when switching process&lt;/li&gt;
&lt;li&gt;1GB real memory: OS mapped identically and kernel don’t need its own page table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7329/27283326716_ba4809fba7.jpg&quot; width=&quot;500&quot; height=&quot;179&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lots of real memory: 896MB OS mapped identically, 1/8 kernel address space use kmap to map other part in real memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7346/27283326666_90e795e740.jpg&quot; width=&quot;500&quot; height=&quot;291&quot;&gt;&lt;/p&gt;
&lt;p&gt;linux divide physical memory into 3 zones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DMA zone: locations &amp;lt; 2^24, DMA devide handle 24-bit address&lt;/li&gt;
&lt;li&gt;Normal zone: locations &amp;lt; 2^30 - 2^27, OS data reside here&lt;/li&gt;
&lt;li&gt;HighMem zone: locations &amp;gt; 2^30 - 2^27, strictly for user pages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each zone’s page divided into 3 list:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;free list: buddy system to maintain&lt;/li&gt;
&lt;li&gt;inactive: picked out by clock algorithm as not recently used, dirty/modified&lt;/li&gt;
&lt;li&gt;active: picked out by clock algorithm as recently used&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7323/27283326576_d537e5cc1f.jpg&quot; width=&quot;500&quot; height=&quot;360&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Copy-on-Write-and-Fork&quot;&gt;&lt;a href=&quot;#Copy-on-Write-and-Fork&quot; class=&quot;headerlink&quot; title=&quot;Copy on Write and Fork&quot;&gt;&lt;/a&gt;Copy on Write and Fork&lt;/h3&gt;&lt;p&gt;fork()/exec() problem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;naive implementation: actually make copy of parent’s address space, waste much time&lt;/li&gt;
&lt;li&gt;vfork(): give address space to child, efficient, but only works if child does an exec&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7370/27283716276_bfae86e4d1.jpg&quot; width=&quot;500&quot; height=&quot;310&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copy on write(lazy evaluation): after fork, r/w change to ro of access control for private page. equivalent to original fork(), faster than it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;shadow object: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one level of indirection between segment and file object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7008/27283326526_2794cdf909.jpg&quot; width=&quot;257&quot; height=&quot;465&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep track of pages that were originally copy-on-write but have been modified&lt;/li&gt;
&lt;li&gt;if page referenced in shadow object, it has been modified&lt;/li&gt;
&lt;li&gt;tell where to copy from when need to perform copy-on-write&lt;/li&gt;
&lt;li&gt;for original object, not all page have to be resident, for shadow object, all page have to be resident&lt;/li&gt;
&lt;li&gt;a variable can exist in many different physical pages simultaneously, each contain a different version&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7358/27283326496_41a89bd5ff.jpg&quot; width=&quot;500&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Backing-Store-Issue&quot;&gt;&lt;a href=&quot;#Backing-Store-Issue&quot; class=&quot;headerlink&quot; title=&quot;Backing Store Issue&quot;&gt;&lt;/a&gt;Backing Store Issue&lt;/h3&gt;&lt;p&gt;type of mmobj(used to manage page frame):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file object(vnode)&lt;/li&gt;
&lt;li&gt;shadow object&lt;/li&gt;
&lt;li&gt;anonymous object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;dynamic/heap and stack region initialized with zeros, known as anonymous pages&lt;/p&gt;
&lt;p&gt;backing up pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;read-only mapping and read-write shared mapping of files are written back to file&lt;/li&gt;
&lt;li&gt;file referenced in shadow objects and anonymous objects are backed up in swap space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;swap space:(windows: reserved+commited)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;radical-conservative approach: eager evaluation, backing-store space is allocated when virtual memory is allocated&lt;/li&gt;
&lt;li&gt;radical-liberal approach: lazy evaluation, backing-store space is allocated only when needed&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7241/27283326326_9cf3700f91.jpg&quot; width=&quot;500&quot; height=&quot;341&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Operating System" scheme="http://www.byteants.com/categories/Studying-Notes/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>Stock Search Android APP – Adapter of ListView</title>
    <link href="http://www.byteants.com/2016/05/28/Stock%20Search%20Android%20APP%20%E2%80%93%20Adapter%20of%20ListView/"/>
    <id>http://www.byteants.com/2016/05/28/Stock Search Android APP – Adapter of ListView/</id>
    <published>2016-05-28T07:00:00.000Z</published>
    <updated>2016-05-29T07:03:43.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;In the stock search application, a lot of information, such as stock details, news and favorite list, are shown in a ListView class. Android SDK provides user a wise mechanism for developers to customize their own list view with litter efforts. Android SDK is good at dividing a tool into reasonable parts and SDK provide a default configuration to combine various parts into a tool. What the developers need to do to only to change parts of it and make use of others to realize their design. In this article, I will show you how to design a news ListView of a company. In the end, I also gives you an example how to configure the ListView itself to implement some interesting characters into the ListView.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7655/27217925842_9344290bb1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;Mechanism-of-Adapter&quot;&gt;&lt;a href=&quot;#Mechanism-of-Adapter&quot; class=&quot;headerlink&quot; title=&quot;Mechanism of Adapter&quot;&gt;&lt;/a&gt;Mechanism of Adapter&lt;/h4&gt;&lt;p&gt;With the help of adapter’s mechanism, the designs of user interface and data managements can be done separately. The following is my design steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Design a data entity class, and then create an ArrayList to store the entities. The entity is one of the items in the ListView.&lt;/li&gt;
&lt;li&gt;Create an XML file. This XML file is what on item in the ListView looks like. At the same the data in the XML is same as the data in the entity class.&lt;/li&gt;
&lt;li&gt;Create an adapter class with input of the XML file and entity class.&lt;/li&gt;
&lt;li&gt;Find the Listview and make use of the adapter class as input. Then we can see the ListView in our application.&lt;br&gt;Entity Class&lt;br&gt;Each entity contains some information. For example, the entity in the news ListView contains the title, basic information, posted date and publisher. The class is as following:&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewsEntry&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String publisher;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewsEntry&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String title, &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String content,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String publisher, &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String date, &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; String url)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.title = title;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.content = content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.publisher = publisher;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.date = date;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.url = url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getNewsTitle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; title; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getNewsContent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; content; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getNewsPublisher&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; publisher; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getNewsDate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; date; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;getNewsUrl&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; url; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then we need to create an ArrayList of entity class. In this application, the ArrayList get data when the method, doInBackground, is called in the Asyntask class (detail information in another article). After this all the data are fetched and stored in the ArrayList.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;NewsEntry&amp;gt; newsListEntries = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;NewsEntry&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JSONObject row = array.getJSONObject(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newsListEntries.add(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; NewsEntry(row.getString(&lt;span class=&quot;string&quot;&gt;&quot;Title&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  row.getString(&lt;span class=&quot;string&quot;&gt;&quot;Description&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  &lt;span class=&quot;string&quot;&gt;&quot;Publisher: &quot;&lt;/span&gt; + row.getString(&lt;span class=&quot;string&quot;&gt;&quot;Source&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  &lt;span class=&quot;string&quot;&gt;&quot;Date: &quot;&lt;/span&gt; + row.getString(&lt;span class=&quot;string&quot;&gt;&quot;Date&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                  row.getString(&lt;span class=&quot;string&quot;&gt;&quot;Url&quot;&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;XML-Design-for-User-Interface&quot;&gt;&lt;a href=&quot;#XML-Design-for-User-Interface&quot; class=&quot;headerlink&quot; title=&quot;XML Design for User Interface&quot;&gt;&lt;/a&gt;XML Design for User Interface&lt;/h3&gt;&lt;p&gt;In order to create an adapter object we need two input parameters, ArrayList and XML file. Before we create our own adapter, we need to design how the entity looks like in the ListView.&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;LinearLayout&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;xmlns:android&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:orientation&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vertical&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;match_parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:textAppearance&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?android:attr/textAppearanceLarge&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Large Text&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/newsTitleText&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:textStyle&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bold&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:autoLink&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;web&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:linksClickable&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:textColor&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#000000&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_marginTop&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;5dp&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:textAppearance&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?android:attr/textAppearanceMedium&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Medium Text&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/newsContentText&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:textAppearance&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?android:attr/textAppearanceSmall&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Small Text&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/newsPublisherText&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_marginTop&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;5dp&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TextView&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:textAppearance&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;?android:attr/textAppearanceSmall&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Small Text&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/newsDateText&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_marginTop&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;5dp&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;LinearLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Adapter-Class&quot;&gt;&lt;a href=&quot;#Adapter-Class&quot; class=&quot;headerlink&quot; title=&quot;Adapter Class&quot;&gt;&lt;/a&gt;Adapter Class&lt;/h3&gt;&lt;p&gt;After we get the needed input XML file and the ArrayList of data, we can combine these two parameters into an adapter. The adapter class’s task is to put the entity’s data into the position of XML file. The first step is to get the element from XML file and then put the data into this element. To be specify, some information formats are needed to transfer if your application are required. For example, this application need change the time stamp into readable format.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewsEntryAdapter&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ArrayAdapter&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;NewsEntry&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewsEntryAdapter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Context context, List&amp;lt;NewsEntry&amp;gt; items)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;(context, R.layout.custom_news_list_item, items);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; View &lt;span class=&quot;title&quot;&gt;getView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position, View convertView, ViewGroup parent)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        LayoutInflater inflater = LayoutInflater.from(getContext());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        View customView = inflater.inflate(R.layout.custom_news_list_item, parent, &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        NewsEntry singleItem = getItem(position);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextView newsTitleText = (TextView) customView.findViewById(R.id.newsTitleText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextView newsContentText = (TextView) customView.findViewById(R.id.newsContentText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextView newsPublisherText = (TextView) customView.findViewById(R.id.newsPublisherText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TextView newsDateText = (TextView) customView.findViewById(R.id.newsDateText);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newsTitleText.setText(Html.fromHtml(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;a href=\&quot; &quot;&lt;/span&gt; + singleItem.getNewsUrl() + &lt;span class=&quot;string&quot;&gt;&quot; \&quot;&amp;gt;&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                singleItem.getNewsTitle() + &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/a&amp;gt;&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newsTitleText.setAutoLinkMask(Linkify.WEB_URLS); &lt;span class=&quot;comment&quot;&gt;/* linkify web urls inside TextView */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newsTitleText.setLinkTextColor(Color.parseColor(&lt;span class=&quot;string&quot;&gt;&quot;#000000&quot;&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;/*set link color to black*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newsContentText.setText(singleItem.getNewsContent());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newsPublisherText.setText(singleItem.getNewsPublisher());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String dataString = singleItem.getNewsDate();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataString = dataString.substring(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, dataString.length());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataString = dataString.trim();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        SimpleDateFormat format = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SimpleDateFormat(&lt;span class=&quot;string&quot;&gt;&quot;yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; customView;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Implement-of-Adapter-Class&quot;&gt;&lt;a href=&quot;#Implement-of-Adapter-Class&quot; class=&quot;headerlink&quot; title=&quot;Implement of Adapter Class&quot;&gt;&lt;/a&gt;Implement of Adapter Class&lt;/h3&gt;&lt;p&gt;Completing the above tasks, putting the data into entity’s ArrayList, designing the view of entity and the design of adapter class, we need to create an object based on the class.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; ArrayAdapter&amp;lt;NewsEntry&amp;gt; adapter2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ListView list = (ListView) findViewById(R.id.newsListView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.setAdapter(adapter2);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;After finish running the above codes, the list can be seen by users.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7163/27124658422_6ce91b4e4b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Customize-ListView&quot;&gt;&lt;a href=&quot;#Customize-ListView&quot; class=&quot;headerlink&quot; title=&quot;Customize ListView&quot;&gt;&lt;/a&gt;Customize ListView&lt;/h3&gt;&lt;p&gt;Every class could be rewrite to realize some characteristics on the ListView. In this application, we will realize that when we slide the entity in the ListView we can delete the entity.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DynamicListView mDynamicListView = (DynamicListView) findViewById(R.id.favoritesListView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mDynamicListView.enableSwipeToDismiss(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnDismissCallback() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onDismiss&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ViewGroup listView, @NonNull &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] reverseSortedPositions)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        android.app.AlertDialog.Builder whetherDelete = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; android.app.AlertDialog.Builder(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        whetherDelete.setTitle(&lt;span class=&quot;string&quot;&gt;&quot;Want to delete&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String name = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position : reverseSortedPositions) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            name = adapter.getItem(position).getFavoriteName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        whetherDelete.setTitle(&lt;span class=&quot;string&quot;&gt;&quot;Want to delete &quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot; from favorites?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        whetherDelete.setPositiveButton(&lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DialogInterface.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DialogInterface dialog, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position : reverseSortedPositions) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    adapter.remove(adapter.getItem(position)) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The DynamicListView is designed by &lt;a href=&quot;https://github.com/nhaarman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Niek Haarman&lt;/a&gt;, at the repository is at &lt;a href=&quot;https://github.com/nhaarman/ListViewAnimations&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ListViewAnimations&lt;/a&gt;. We also can design our own ListView basic on the given ListView class. Niek gives us a great example to show how to extent.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DynamicListView&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ListView&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@NonNull&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; MyOnScrollListener mMyOnScrollListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * The &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; com.nhaarman.listviewanimations.itemmanipulation.dragdrop.DragAndDropHandler&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * that will handle drag and drop functionality, if set.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; DragAndDropHandler mDragAndDropHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * The &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; com.nhaarman.listviewanimations.itemmanipulation.swipedismiss.SwipeTouchListener&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * that will handle swipe movement functionality, if set.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SwipeTouchListener mSwipeTouchListener;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * The &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; com.nhaarman.listviewanimations.itemmanipulation.TouchEventHandler&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * that is currently actively consuming &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@code&lt;/span&gt; MotionEvent&amp;#125;s.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TouchEventHandler mCurrentHandlingTouchEventHandler;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * The &amp;#123;&lt;span class=&quot;doctag&quot;&gt;@link&lt;/span&gt; com.nhaarman.listviewanimations.itemmanipulation.animateaddition.AnimateAdditionAdapter&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * that is possibly set to animate insertions.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; AnimateAdditionAdapter&amp;lt;Object&amp;gt; mAnimateAdditionAdapter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Nullable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; SwipeUndoAdapter mSwipeUndoAdapter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DynamicListView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Context context)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(context, &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DynamicListView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Context context, @Nullable &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; AttributeSet attrs)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//noinspection HardCodedStringLiteral&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;(context, attrs, Resources.getSystem().getIdentifier(&lt;span class=&quot;string&quot;&gt;&quot;listViewStyle&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;attr&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;android&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;All in all, Android SDK allows developers to customize their ListView with freedom. We not only could configure the entity, but also could revise the ListView itself. For instance, as described in the second to last section, we can realize some animation to the ListView. Moreover, the design philosophy of Android SDk allows developers to customize other tools too. It is just like building blocks, where you can create lots of things in your mind and it is a funny experience.&lt;/p&gt;
&lt;p&gt;-&lt;a href=&quot;https://github.com/spacime/Projects/tree/master/Stock%20Search%20Android%20APP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;In the stock search application, a lot of information, such as stock details, news and favorite list, are shown in a ListView class. Android SDK provides user a wise mechanism for developers to customize their own list view with litter efforts. Android SDK is good at dividing a tool into reasonable parts and SDK provide a default configuration to combine various parts into a tool. What the developers need to do to only to change parts of it and make use of others to realize their design. In this article, I will show you how to design a news ListView of a company. In the end, I also gives you an example how to configure the ListView itself to implement some interesting characters into the ListView.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7655/27217925842_9344290bb1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.byteants.com/categories/Project/"/>
    
      <category term="Android Develop" scheme="http://www.byteants.com/categories/Project/Android-Develop/"/>
    
    
      <category term="JSON" scheme="http://www.byteants.com/tags/JSON/"/>
    
      <category term="Android" scheme="http://www.byteants.com/tags/Android/"/>
    
      <category term="ListView" scheme="http://www.byteants.com/tags/ListView/"/>
    
      <category term="Adapter" scheme="http://www.byteants.com/tags/Adapter/"/>
    
  </entry>
  
  <entry>
    <title>Stock Search Android APP – AsyncTask</title>
    <link href="http://www.byteants.com/2016/05/27/Stock%20Search%20Android%20APP%20--%20AsyncTask/"/>
    <id>http://www.byteants.com/2016/05/27/Stock Search Android APP -- AsyncTask/</id>
    <published>2016-05-27T07:00:00.000Z</published>
    <updated>2016-05-28T02:50:20.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;Previously I have developed a Web application, and now I will realize the same functions on an Android application. This Android application can be used to search companies’ stock information and realize some useful tools. Many functions in this application are required to fetch data from the webserver. In order to simplify the application design, Android provides developer with AsyncTask class to divide the user interface with background process. Precisely, in this application the user interface’s task is showing lists or charts based on data and the background task is to fetch data from the server. In other words, the user interface will show up until the data arrives when the background task is finished and then show for the user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7397/26683716203_c5d7c8b5a7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7302/27187459276_16256d841c.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;The-Structure-of-AsyncTask-Class&quot;&gt;&lt;a href=&quot;#The-Structure-of-AsyncTask-Class&quot; class=&quot;headerlink&quot; title=&quot;The Structure of AsyncTask Class&quot;&gt;&lt;/a&gt;The Structure of AsyncTask Class&lt;/h3&gt;&lt;p&gt;AsyncTask is an abstract class provided by Android which helps us to use the UI thread properly. This class allows us to perform long/background operations and show its result on the UI thread without having to manipulate threads.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;doInBackground: Code performing long running operation goes in this method. When onClick method is executed on click of button, it calls execute method which accepts parameters and automatically calls doInBackground method with the parameters passed.&lt;/li&gt;
&lt;li&gt;onPostExecute: This method is called after doInBackground method completes processing. Result from doInBackground is passed to this method.&lt;/li&gt;
&lt;li&gt;onPreExecute: This method is called before doInBackground method is called.&lt;/li&gt;
&lt;li&gt;onProgressUpdate: This method is invoked by calling publishProgress anytime&lt;br&gt;from doInBackground call this method.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7187/26683719193_6e1f860c1a.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Create-the-AsyncTask-class&quot;&gt;&lt;a href=&quot;#Create-the-AsyncTask-class&quot; class=&quot;headerlink&quot; title=&quot;Create the AsyncTask class&quot;&gt;&lt;/a&gt;Create the AsyncTask class&lt;/h3&gt;&lt;p&gt;Specifically, here I will provide a sample function to make use of AsyncTask class so as to explain it clearly. The process is that the application fetch the data from server with a parameter, the company’s Stock Ticker Symbol and then show the details in a list for the user. The first step is to create a new class extend from AsyncTask class and then create an object based on this class when you need to show the data. In this application, I put the creation of object on onCreate function of the activity.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create an new object when needed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StockDetailsFragmentFiller().execute(stockSymbol);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Design a class extending from AsyncTask&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;StockDetailsFragmentFiller&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;AsyncTask&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;doInBackground-Period&quot;&gt;&lt;a href=&quot;#doInBackground-Period&quot; class=&quot;headerlink&quot; title=&quot;doInBackground Period&quot;&gt;&lt;/a&gt;doInBackground Period&lt;/h3&gt;&lt;p&gt;The function doInBackground will be called when the object is created based on AsyncTask class. In This function, we get the data based on the url and the format of the data is JSON, which is a simple and easy to parse. After getting the JSON file, we parse it into a JSON for the future use.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String... key)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        companySymbol = key[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        StringBuilder sb = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StringBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String json_string = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* ------------------ Loading string from server content ------------------------ */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            URL url = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URL(&lt;span class=&quot;string&quot;&gt;&quot;http://level-oxygen-127003.appspot.com/index.php?symbol=&quot;&lt;/span&gt; + companySymbol);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            urlConnection = (HttpURLConnection) url.openConnection();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            InputStream in = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedInputStream(urlConnection.getInputStream());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            BufferedReader reader = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BufferedReader(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InputStreamReader(in));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            String line;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((line = reader.readLine()) != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sb.append(line);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            json_string = sb.toString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/*Log.d(&quot;Info&quot;, result);*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* ------------- Finished. String fully loaded from server response ------------- */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.d(&lt;span class=&quot;string&quot;&gt;&quot;Result&quot;&lt;/span&gt;, sb.toString());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* We receive a JSON object (not a JSON array), so we should create a JSONObject */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            JSONObject resultObject = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; JSONObject(json_string);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;….&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Log.w(&lt;span class=&quot;string&quot;&gt;&quot;Error&quot;&lt;/span&gt;, e.getMessage());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            urlConnection.disconnect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;onPostExecute-Period&quot;&gt;&lt;a href=&quot;#onPostExecute-Period&quot; class=&quot;headerlink&quot; title=&quot;onPostExecute Period&quot;&gt;&lt;/a&gt;onPostExecute Period&lt;/h3&gt;&lt;p&gt;The onPostExecute function will be called the doInBackground finish all its statements. In this function, we need to create an adapter based on the JSON object we created in the doInBackground function for ListView. After that we get a list by findViewById method and put the adapter into the list. Finally, all the information could be seen by the user. The customize adapter for the list will be discussed in another article.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String result)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//            adapter = new StockDetailAdapter(ResultActivityNew.this, entries);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;/* populate Stock Details ListView */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;comment&quot;&gt;/* Build Adapter */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            adapter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; StockDetailAdapter(ResultActivityNew.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, entries);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            populateStockDetailsListView(stockSymbol);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;AsyncTask class provides developers with a method to deal with the threads of user interface and background data process separately, which dramatically reduces the workload of programmers.&lt;/p&gt;
&lt;p&gt;-&lt;a href=&quot;https://github.com/spacime/Projects/tree/master/Stock%20Search%20Android%20APP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;Previously I have developed a Web application, and now I will realize the same functions on an Android application. This Android application can be used to search companies’ stock information and realize some useful tools. Many functions in this application are required to fetch data from the webserver. In order to simplify the application design, Android provides developer with AsyncTask class to divide the user interface with background process. Precisely, in this application the user interface’s task is showing lists or charts based on data and the background task is to fetch data from the server. In other words, the user interface will show up until the data arrives when the background task is finished and then show for the user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7397/26683716203_c5d7c8b5a7.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.byteants.com/categories/Project/"/>
    
      <category term="Android Develop" scheme="http://www.byteants.com/categories/Project/Android-Develop/"/>
    
    
      <category term="JSON" scheme="http://www.byteants.com/tags/JSON/"/>
    
      <category term="Android" scheme="http://www.byteants.com/tags/Android/"/>
    
      <category term="AsyncTask" scheme="http://www.byteants.com/tags/AsyncTask/"/>
    
  </entry>
  
  <entry>
    <title>File System</title>
    <link href="http://www.byteants.com/2016/05/27/studying%20notes.operating%20system.chapter%206/"/>
    <id>http://www.byteants.com/2016/05/27/studying notes.operating system.chapter 6/</id>
    <published>2016-05-27T07:00:00.000Z</published>
    <updated>2016-05-29T02:00:04.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7412/27021627480_c5303be219.jpg&quot; width=&quot;500&quot; height=&quot;294&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;The-Basic-Of-File-Systems&quot;&gt;&lt;a href=&quot;#The-Basic-Of-File-Systems&quot; class=&quot;headerlink&quot; title=&quot;The Basic Of File Systems&quot;&gt;&lt;/a&gt;The Basic Of File Systems&lt;/h2&gt;&lt;h3 id=&quot;UNIX’s-S5FS&quot;&gt;&lt;a href=&quot;#UNIX’s-S5FS&quot; class=&quot;headerlink&quot; title=&quot;UNIX’s S5FS&quot;&gt;&lt;/a&gt;UNIX’s S5FS&lt;/h3&gt;&lt;p&gt;file system: manage object in secondary storage&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file system independent: virtual file system(VFS)&lt;/li&gt;
&lt;li&gt;file system dependent: actual file system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a file object(VFS) use an array of function pointers implement polymorphism&lt;/p&gt;
&lt;p&gt;disk is an array of blocks of 1KB each:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boot block&lt;/li&gt;
&lt;li&gt;superblock:&lt;ul&gt;
&lt;li&gt;describe a free inode list(inode cache)&lt;/li&gt;
&lt;li&gt;contain head of free list&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;i-list: an array of inodes, each representing a file&lt;/li&gt;
&lt;li&gt;data region&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7507/27021628560_cbef10b04f.jpg&quot; width=&quot;285&quot; height=&quot;386&quot;&gt;&lt;/p&gt;
&lt;p&gt;inode contains: device, inode number, mode(file type), link count, owner, group, size, disk map&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7744/27021628730_c45d76fd57.jpg&quot; width=&quot;282&quot; height=&quot;423&quot;&gt;&lt;/p&gt;
&lt;p&gt;disk map:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contains 13 entries&lt;/li&gt;
&lt;li&gt;first 10 entries points to 10 blocks in data region, each block is 1KB&lt;/li&gt;
&lt;li&gt;11th entries has one level indirection, points to a sepcial block, which contains 256 entries pointing to 256 blocks in data region&lt;/li&gt;
&lt;li&gt;12th entries has two level indirection&lt;/li&gt;
&lt;li&gt;13th entries has three level indirection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7367/27021628870_5b83a21a78.jpg&quot; width=&quot;500&quot; height=&quot;349&quot;&gt;&lt;/p&gt;
&lt;p&gt;free list in superblock: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;contain 100 free block pointer,last point to a special block containing next 100 free block pointer&lt;/li&gt;
&lt;li&gt;if a free block is used, corresponding entry points to 0, become idle&lt;/li&gt;
&lt;li&gt;if 99 free block in superblock is used and need a free block, copy special block into superblock, use special free block&lt;/li&gt;
&lt;li&gt;if a block is freed, an idle entry points to the block&lt;/li&gt;
&lt;li&gt;if free list is full and a block need freed, copy entries into freed block, wipe out free list and point to freed block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7289/27021629130_d9c09d160b.jpg&quot; width=&quot;500&quot; height=&quot;294&quot;&gt;&lt;/p&gt;
&lt;p&gt;inode cache in superblock:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inode are marked free or not free&lt;/li&gt;
&lt;li&gt;superblock track first 100 free inode&lt;/li&gt;
&lt;li&gt;allocate an inode: mark it not free, remove from inode cache&lt;/li&gt;
&lt;li&gt;if inode cache is empty: scan i-list to refill it&lt;/li&gt;
&lt;li&gt;free inode: mark it free, add to inode cache if has room&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7289/27021629270_60759894fc.jpg&quot; width=&quot;500&quot; height=&quot;368&quot;&gt;&lt;/p&gt;
&lt;p&gt;create file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get a free block, update free list&lt;/li&gt;
&lt;li&gt;get a free inode, update i-list and inode cache&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;delete file:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add block to free list&lt;/li&gt;
&lt;li&gt;mark inode free in i-list, may update inode cache&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Disk-Architecture&quot;&gt;&lt;a href=&quot;#Disk-Architecture&quot; class=&quot;headerlink&quot; title=&quot;Disk Architecture&quot;&gt;&lt;/a&gt;Disk Architecture&lt;/h3&gt;&lt;p&gt;disk architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;smallest addressable unit is a sector&lt;/li&gt;
&lt;li&gt;disk address=(head/surface#, cylinder/track#, sector#)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7389/26689576304_8119b21634.jpg&quot; width=&quot;500&quot; height=&quot;283&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Improving-Performance&quot;&gt;&lt;a href=&quot;#Improving-Performance&quot; class=&quot;headerlink&quot; title=&quot;Improving Performance&quot;&gt;&lt;/a&gt;Improving Performance&lt;/h3&gt;&lt;p&gt;access time = seek time + rotational latency + data transfer time&lt;/p&gt;
&lt;p&gt;FFS(fast file system):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;better on-disk organization&lt;/li&gt;
&lt;li&gt;longer component names in directories&lt;/li&gt;
&lt;li&gt;retains disk map of S5FS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;improve performance(FFS):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hardware: employ pre-fetch buffer(read often in sequential)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;software:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;increase block size:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7318/26689576324_e0803bc13a.jpg&quot; width=&quot;500&quot; height=&quot;297&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;downside: worse internal fragmentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7422/27199845262_d164a5872b.jpg&quot; width=&quot;500&quot; height=&quot;309&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;solution: blocks may split into fragments that can be independently assigned to files, number of fragments per block is fixed for each file system&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7419/27199845322_058b548502.jpg&quot; width=&quot;500&quot; height=&quot;344&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;minimize seek time:&lt;ul&gt;
&lt;li&gt;keep related things close&lt;/li&gt;
&lt;li&gt;separate unrelated things&lt;/li&gt;
&lt;li&gt;put inode, directories and file in same cylinder group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7235/26690515813_5a17e552e1.jpg&quot; width=&quot;500&quot; height=&quot;110&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reduce rotational latency: use block interleaving&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7292/27296651475_74bdaea7b7.jpg&quot; width=&quot;500&quot; height=&quot;263&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aggressive caching: cache all commonly used files in primary memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7709/27296651915_f979c87e2b.jpg&quot; width=&quot;500&quot; height=&quot;288&quot;&gt;&lt;/p&gt;
&lt;p&gt;aggressive caching: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use buffer cache(hash function keyed by inode number uesd to locate file blocks) kept in file system, most read and write have cache hit&lt;/li&gt;
&lt;li&gt;for write, need update disk:&lt;ul&gt;
&lt;li&gt;write through: write back as soon as possible&lt;/li&gt;
&lt;li&gt;write back: write back wait for a while, have risk crashing and lossing data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7352/27296651945_989ff17b6d.jpg&quot; width=&quot;500&quot; height=&quot;228&quot;&gt;&lt;/p&gt;
&lt;p&gt;log-structured file system: never delete, append only(minimize seek time and rotational latency)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if modifying file A, append A to last block, append new inode who points to A to last block, repeat until changing root inode&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7539/27296651995_50507e8163.jpg&quot; width=&quot;500&quot; height=&quot;126&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;inode map: if modifying file A, append a piece of inode map(pointing to inode to A), checkpoint file(two copies) keep track of all inode map pieces on a fixed region&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7476/27296652025_001c2a6d92.jpg&quot; width=&quot;500&quot; height=&quot;139&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;good performance for write, can recover from crashes, but waste lots of disk space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;file system in windows: extents&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file is indexed in runlist(same function as inode)&lt;/li&gt;
&lt;li&gt;contains many length and offset&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7546/27296651695_c5b7109b52.jpg&quot; width=&quot;500&quot; height=&quot;204&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;problem:&lt;ul&gt;
&lt;li&gt;lots of small areas of free space: use defragmenter to coalesce free space&lt;/li&gt;
&lt;li&gt;linear search through a long list of entexts: use multiple levels&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7324/27296651765_e5cd9da946.jpg&quot; width=&quot;500&quot; height=&quot;340&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Crash-Resiliency&quot;&gt;&lt;a href=&quot;#Crash-Resiliency&quot; class=&quot;headerlink&quot; title=&quot;Crash Resiliency&quot;&gt;&lt;/a&gt;Crash Resiliency&lt;/h2&gt;&lt;p&gt;dirty/modified blocks: disk block in buffer cache is dirty if modified, file system periodically gather dirty block, update disk&lt;/p&gt;
&lt;p&gt;updating disk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S5FS&amp;amp;FFS: file system can sequence disk write in any order&lt;/li&gt;
&lt;li&gt;soft-update: provide recoverable consistency&lt;/li&gt;
&lt;li&gt;journaling and shadow paging provide: provide transactional consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7306/27296652085_37f0c5e392.jpg&quot; width=&quot;500&quot; height=&quot;276&quot;&gt;&lt;/p&gt;
&lt;p&gt;soft update:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;order disk operation to preserve meta-data consistency, update cache and disk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7014/27296652165_38f7dfca46.jpg&quot; width=&quot;500&quot; height=&quot;198&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;could have innocuous inconsistency, need to reclaim lost disk block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7441/27296652215_9f4f5f7f3f.jpg&quot; width=&quot;466&quot; height=&quot;365&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;doesn’t work if disk operation don’t have topological order&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7528/27296652295_e72a35d325.jpg&quot; width=&quot;500&quot; height=&quot;212&quot;&gt;&lt;/p&gt;
&lt;p&gt;transactions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;group disk write into transactions&lt;/li&gt;
&lt;li&gt;ACID property: atomic, consistent, isolated, durable&lt;/li&gt;
&lt;li&gt;journaling: before updating disk&lt;ul&gt;
&lt;li&gt;undo journaling: “before images” of blocks are writeen into journal&lt;/li&gt;
&lt;li&gt;redo journaling: “after images” of blocks are written into journal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shadow paging: steps of transactioin written to disk, old values remain, single write switch old state to new&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;journaling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;journal is separate part of disk&lt;/li&gt;
&lt;li&gt;journal is append-only, have commit record one block in size&lt;/li&gt;
&lt;li&gt;when updating file system, write to journal first, then write to file system after writing commit record to journal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7336/27296652375_cc673fa2bf.jpg&quot; width=&quot;500&quot; height=&quot;73&quot;&gt;&lt;/p&gt;
&lt;p&gt;journaling recovery:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make file system in consistent state at transaction boundary&lt;/li&gt;
&lt;li&gt;find all committed transactions&lt;/li&gt;
&lt;li&gt;redo all transactions&lt;/li&gt;
&lt;li&gt;after recovery, state of file system is at the end of last committed transaction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;journaling option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;journal everything&lt;/li&gt;
&lt;li&gt;journal metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;journaling vs log-structured file system&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;log-structured file system: good write performance, recovery using checkpoint file&lt;/li&gt;
&lt;li&gt;journaling: crash resiliency, can add to any file system, use checkpointing to clear journal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;shadow paging: based on copy-on-write&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7551/27199846712_faba88c8a0.jpg&quot; width=&quot;500&quot; height=&quot;299&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Directories-and-Naming&quot;&gt;&lt;a href=&quot;#Directories-and-Naming&quot; class=&quot;headerlink&quot; title=&quot;Directories and Naming&quot;&gt;&lt;/a&gt;Directories and Naming&lt;/h2&gt;&lt;p&gt;FFS directory format: inode number, entry length, name length, name(any length is acceptable)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7289/27199846782_b7d4e6d329.jpg&quot; width=&quot;430&quot; height=&quot;500&quot;&gt;&lt;/p&gt;
&lt;p&gt;lookup filename in directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;linear search: O(n)&lt;/li&gt;
&lt;li&gt;B+ tree: O(logn), all leaves appear at same level and carry no keys, internal nodes contain no data, leaf nodes are linked&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7452/27199846992_4c8779a5c7.jpg&quot; width=&quot;500&quot; height=&quot;329&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hash table: O(1), extensible hashing, one level indirection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7724/27199846852_cba250caca.jpg&quot; width=&quot;500&quot; height=&quot;270&quot;&gt;&lt;/p&gt;
&lt;p&gt;name-space management: when having multiple partitions of hard drive, use mounting to creaet an entry in inode pointing to file system, happens in memory&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7426/27199847062_89881893f9.jpg&quot; width=&quot;500&quot; height=&quot;360&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Multiple-Disks&quot;&gt;&lt;a href=&quot;#Multiple-Disks&quot; class=&quot;headerlink&quot; title=&quot;Multiple Disks&quot;&gt;&lt;/a&gt;Multiple Disks&lt;/h2&gt;&lt;p&gt;advantage of multiple disk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hold more data&lt;/li&gt;
&lt;li&gt;stored redundantly to increase reliability and availability&lt;/li&gt;
&lt;li&gt;allowing parallel acess to reduce access time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;logical volume manager(LVM):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7393/27199847132_10b0517b10.jpg&quot; width=&quot;500&quot; height=&quot;353&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spanning: multiple disks appear to file system as one&lt;/li&gt;
&lt;li&gt;mirroring: file system write redundantly to multiple disk&lt;/li&gt;
&lt;li&gt;striping: store part of file in each disk&lt;ul&gt;
&lt;li&gt;stripe width: the number of disks to write to&lt;/li&gt;
&lt;li&gt;striping unit: the size of file to write to each disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7008/27199847332_b788d522dd.jpg&quot; width=&quot;500&quot; height=&quot;256&quot;&gt;&lt;/p&gt;
&lt;p&gt;parallel disk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;advantage:&lt;ul&gt;
&lt;li&gt;retrieve blocks belonging to multiple files simultaneously&lt;/li&gt;
&lt;li&gt;reduce access time when block is spread over multiple disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;disadvantage:&lt;ul&gt;
&lt;li&gt;higher variance&lt;/li&gt;
&lt;li&gt;worse reliability&lt;/li&gt;
&lt;li&gt;heterogenious disk&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RAID(redundant array of inexpensive disks): combine striping with mirroring&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;level 1: just mirroring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7325/27021628480_709f1bf59a.jpg&quot; width=&quot;500&quot; height=&quot;314&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;level 2: data plus ECC(check every bits, need serveal disks)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7791/27021628310_dbb0a0fbe9.jpg&quot; width=&quot;500&quot; height=&quot;374&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;level 3: data plus parity(check sum of bits, need one disk)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7702/27021628150_4927ff211e.jpg&quot; width=&quot;500&quot; height=&quot;372&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;level 4: data  plus parity(check sum of block, need one disk), bottlenect at parity block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7409/27021627980_8d5000ef58.jpg&quot; width=&quot;500&quot; height=&quot;371&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;level 5: level 4 plus spread parity block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7073/27021627880_76e4be0f22.jpg&quot; width=&quot;500&quot; height=&quot;254&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Flash-Memory&quot;&gt;&lt;a href=&quot;#Flash-Memory&quot; class=&quot;headerlink&quot; title=&quot;Flash Memory&quot;&gt;&lt;/a&gt;Flash Memory&lt;/h2&gt;&lt;p&gt;flash memory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;advantage: use block to store data, random access, no seek, rotational latency, low power, vibration-resistant&lt;/li&gt;
&lt;li&gt;disadvantage: limited lifetime, cost more than disk, write is expensive(change from 0 to 1 whole block)&lt;/li&gt;
&lt;li&gt;NOR(byte addressable), NAND(page addressable)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wear leveling: spread write across entire drive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use flash translation layer(FTL): map disk block to flash block&lt;/li&gt;
&lt;li&gt;use log-structured file system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7318/27021627740_ff10b2f5d9.jpg&quot; width=&quot;500&quot; height=&quot;119&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7412/27021627480_c5303be219.jpg&quot; width=&quot;500&quot; height=&quot;294&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Operating System" scheme="http://www.byteants.com/categories/Studying-Notes/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>Processor Management</title>
    <link href="http://www.byteants.com/2016/05/25/studying%20notes.operating%20system.chapter%205/"/>
    <id>http://www.byteants.com/2016/05/25/studying notes.operating system.chapter 5/</id>
    <published>2016-05-25T07:00:00.000Z</published>
    <updated>2016-05-29T02:00:49.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7418/26647571444_3d067112a5.jpg&quot; width=&quot;500&quot; height=&quot;430&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Threads-Implementations&quot;&gt;&lt;a href=&quot;#Threads-Implementations&quot; class=&quot;headerlink&quot; title=&quot;Threads Implementations&quot;&gt;&lt;/a&gt;Threads Implementations&lt;/h2&gt;&lt;h3 id=&quot;Strategies&quot;&gt;&lt;a href=&quot;#Strategies&quot; class=&quot;headerlink&quot; title=&quot;Strategies&quot;&gt;&lt;/a&gt;Strategies&lt;/h3&gt;&lt;p&gt;threads implementation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;one-level model(kernel): variable-weight processes&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c4.staticflickr.com/8/7624/27184610091_f899156e21.jpg&quot; width=&quot;500&quot; height=&quot;322&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;two-level model(user library):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nx1: single kernel thread(per user process)&lt;/li&gt;
&lt;li&gt;MxN: multiple kernel threads(per user process)&lt;/li&gt;
&lt;li&gt;scheduler activations model&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;one-level model: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each user thread mapped one-to-one to kernel thread&lt;/li&gt;
&lt;li&gt;kernel create TCB, PCB, kernel/user stack&lt;/li&gt;
&lt;li&gt;all operation in kernel, system calls are expensive&lt;/li&gt;
&lt;li&gt;&lt;p&gt;variable-weight process(variant): portions of parent process selectively copied into or shared with child process&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c4.staticflickr.com/8/7346/27184610211_eaba755622.jpg&quot; width=&quot;500&quot; height=&quot;283&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Native POSIX-threads library:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;threads of a process form thread group&lt;/li&gt;
&lt;li&gt;any thread in group can wait for other to terminate&lt;/li&gt;
&lt;li&gt;signal delivered to any thread in group&lt;/li&gt;
&lt;li&gt;futex(fast user space mutex): if mutex available, return quickly with mutex locked, if not, make a system call and block in kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;N to 1 model:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;threads implemented entirely in user level&lt;/li&gt;
&lt;li&gt;kernel don’t know the existance of user threads&lt;/li&gt;
&lt;li&gt;fast, no system call for thread-related APIs&lt;/li&gt;
&lt;li&gt;&lt;p&gt;but if having system call, no other user thread can run&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c2.staticflickr.com/8/7691/27184610321_aaeec10a94.jpg&quot; width=&quot;500&quot; height=&quot;334&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;solution: have a non-blocking read() called real_read()&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; read(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; fd, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *buf, &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; count)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;ssize_t&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((ret=real_read(fd,buf,count))==&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno==EWOULDBLOCK)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				sem_wait(&amp;amp;FileSemaphore[fd]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;M to N model: if don’t have enough kernel threads per process, end up having same problem with N-to-1 model&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7273/27184610041_e32a077d33.jpg&quot; width=&quot;500&quot; height=&quot;286&quot;&gt;&lt;/p&gt;
&lt;p&gt;problem: deadlock(automatically create new kernel thread), priority inversion&lt;/p&gt;
&lt;p&gt;scheduler activations model: process determine which threads get to use, processor determine which process get to use&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7440/27220521676_42a3117c81.jpg&quot; width=&quot;500&quot; height=&quot;327&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;A-Simple-Thread-Implementation&quot;&gt;&lt;a href=&quot;#A-Simple-Thread-Implementation&quot; class=&quot;headerlink&quot; title=&quot;A Simple Thread Implementation&quot;&gt;&lt;/a&gt;A Simple Thread Implementation&lt;/h3&gt;&lt;p&gt;concurrency control:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interrupt handler running on same processor accessing same data&lt;/li&gt;
&lt;li&gt;another thread running on same processor may preempt this thread, accessing same data&lt;/li&gt;
&lt;li&gt;interrupt handler running on another processor accessing same data&lt;/li&gt;
&lt;li&gt;&lt;p&gt;another thread running on another processor accessing the same data&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c2.staticflickr.com/8/7720/27184609961_f83607aecf.jpg&quot; width=&quot;500&quot; height=&quot;208&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each thread must be in CPU or a queue&lt;br&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7137/27184609921_e32a077d33.jpg&quot; width=&quot;500&quot; height=&quot;289&quot;&gt;&lt;/p&gt;
&lt;p&gt;if thread not currently running, stack frame corresponds to switch()&lt;br&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7781/27184609801_8d7410c3d2.jpg&quot; width=&quot;401&quot; height=&quot;361&quot;&gt;&lt;/p&gt;
&lt;p&gt;concurrency control (2) solution:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;thread_switch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;thread_t&lt;/span&gt; nextthread,oldcurrent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	nextthread=dequeue(runqueue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	oldcurrent=currentthread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	currentthread=nextthread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	swapcontext(&amp;amp;oldcurrent-&amp;gt;context,&amp;amp;nextthread-&amp;gt;context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mutex_lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;mutex_t&lt;/span&gt; *m)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(m-&amp;gt;locked)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		enqueue(m-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;,currentthread);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		thread_switch();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m-&amp;gt;locked=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mutex_unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;mutex_t&lt;/span&gt; *m)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(queue_empty(m-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		m-&amp;gt;locked=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		enqueue(runqueue,dequeue(m-&amp;gt;&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Multiple-Processors&quot;&gt;&lt;a href=&quot;#Multiple-Processors&quot; class=&quot;headerlink&quot; title=&quot;Multiple Processors&quot;&gt;&lt;/a&gt;Multiple Processors&lt;/h3&gt;&lt;p&gt;avoid boundary condition: run on each processor an idle thread&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;idle_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		enqueue(runqueue,CurrentThread)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		thread_switch()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;concurrency control (4) solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spin lock: waiting time small&lt;/li&gt;
&lt;li&gt;blocking lock: waiting time long&lt;/li&gt;
&lt;li&gt;futex: optimized blocking lock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;hardware support, compare and swap machine instruction:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CAS&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *ptr, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; old, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp=*ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(tmp==old)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		*ptr=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;CAS implemented as a machine-level instruction, execute atomically&lt;br&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7673/27184609691_d394987e61.jpg&quot; width=&quot;500&quot; height=&quot;256&quot; alt=&quot;unlocked&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7399/27184609751_5c76c3ebfe.jpg&quot; width=&quot;347&quot; height=&quot;278&quot; alt=&quot;locked&quot;&gt;&lt;/p&gt;
&lt;p&gt;spin lock:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;spin_lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *mutex)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(CAS(mutex,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;spin_lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *mutex)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(*mutex==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!CAS(mutex,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;spin_unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *mutex)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*mutex=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;futex:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two system calls are provided to support futex:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;futex_wait(&lt;span class=&quot;keyword&quot;&gt;futex_t&lt;/span&gt; *futex,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; val)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(futex-&amp;gt;val==val)sleep();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;futex_wake(&lt;span class=&quot;keyword&quot;&gt;futex_t&lt;/span&gt; *futex)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;ancillary functions:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;atomic_inc&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *val)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((*val)++);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;atomic_dec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *val)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((*val)--);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;complete futex code:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;futex_t&lt;/span&gt; *futex)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((c=CAS(&amp;amp;futex-&amp;gt;val,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(c==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;||(CAS(&amp;amp;futex-&amp;gt;val,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				futex_wait(futex,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((c=CAS(&amp;amp;futex-&amp;gt;val,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))!=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;futex_t&lt;/span&gt; *futex)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(atomic_dec(&amp;amp;futex-&amp;gt;val)!=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		futex-&amp;gt;val=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		futex_wake(futex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Interrupts&quot;&gt;&lt;a href=&quot;#Interrupts&quot; class=&quot;headerlink&quot; title=&quot;Interrupts&quot;&gt;&lt;/a&gt;Interrupts&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7455/26978907840_dd26b3cc1f.jpg&quot; width=&quot;500&quot; height=&quot;322&quot;&gt;&lt;/p&gt;
&lt;p&gt;non-preemption kernel: a kernel thread never be perrmpted by another thread&lt;/p&gt;
&lt;p&gt;dealing with perrmption kernel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disable preemption&lt;/li&gt;
&lt;li&gt;use interrupt masking&lt;/li&gt;
&lt;li&gt;spin lock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;interrupt masking:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unmasked interrupts can interrupt current thread&lt;/li&gt;
&lt;li&gt;cause: occurrence of particular class of interrupt; explicit programmatic action&lt;/li&gt;
&lt;li&gt;hierarchy of interrupt levels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;concurrency control (1) solution:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;disk_write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	oldipl=setipl(diskipl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	startIO();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	enqueue(disk_waitq,currentthread);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	thread_switch();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	setipl(oldipl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;thread_switch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;thread_t&lt;/span&gt; *oldthread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; oldipl;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	oldipl=setipl(high_ipl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(queue_empty(runqueue))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		setipl(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		setipl(high_ipl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	oldthread=currentthread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	currentthread=dequeue(runqueue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	swapcontext(oldthread-&amp;gt;context,currentthread-&amp;gt;context);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	setipl(oldipl);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;concurrency control (3) solution:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accessxthread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	disablepreemption();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	maskinterrupts();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spinlock(&amp;amp;L);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x=x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spinunlock(&amp;amp;L);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	unmaskinterrupts();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	enablepreemption();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;accessxinterrupt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spinlock(&amp;amp;L);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	x=x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	spinunlock(&amp;amp;L);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;deferred work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interrupt handler only do what must do&lt;/li&gt;
&lt;li&gt;defer most of work to be done after interrupt handler return&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;deferred processing:&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toplevelinterrupthandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; dev)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	interruptvector[dev]();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(previouscontext==threadcontext)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		unmaskinterrupts();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!empty(workqueue))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			work=dequeue(workqueue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			work();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;networkinterrupthandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	enqueue(workqueue,morework);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;windows handle deferred work in a special interrupt context, DPC(deferred procedure call), a software interrupt&lt;br&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7451/27184609531_5e8ceac9ae.jpg&quot; width=&quot;449&quot; height=&quot;483&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InterruptHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	QueueDPC(MoreWork);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*request a DPC interrupt*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DPCHandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!Empty(DPCQueue))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Work=DeQueue(DPCQueue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Work();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;linux handle deferred work in a special kernel thread&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;interrupthandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;queue&lt;/span&gt;(workqueue,morework);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	setevent(work);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;softwareinterruptthread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		waitevent(work);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!empty(workqueue))&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			work=dequeue(workqueue);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			work();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;signal: perform given action in context of a particular thread in user mode&lt;br&gt;APC: windows asynchronous procedure call, roughly same, but may be done in kernel mode&lt;/p&gt;
&lt;p&gt;signal handler: set up user stack(save&amp;amp;restore registers, signal mask) and handler as a subroutine&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;save user thread context in a sigframe on user stack&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c7.staticflickr.com/8/7147/26647571814_67e3246188.jpg&quot; width=&quot;500&quot; height=&quot;344&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Scheduling&quot;&gt;&lt;a href=&quot;#Scheduling&quot; class=&quot;headerlink&quot; title=&quot;Scheduling&quot;&gt;&lt;/a&gt;Scheduling&lt;/h2&gt;&lt;p&gt;sort of system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simple batch&lt;/li&gt;
&lt;li&gt;multiprogrammed batch&lt;/li&gt;
&lt;li&gt;time sharing&lt;/li&gt;
&lt;li&gt;partitioned server&lt;/li&gt;
&lt;li&gt;real time: hard real time/soft real time&lt;/li&gt;
&lt;li&gt;general purpose&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;scheduling goal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;maximize CPU utilization&lt;/li&gt;
&lt;li&gt;maximize throughtput: CPU-bound, I/O bound&lt;/li&gt;
&lt;li&gt;minimize wait time&lt;/li&gt;
&lt;li&gt;minimize response time&lt;/li&gt;
&lt;li&gt;fairness&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;scheduling algorithm:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;basic: FIFO, SJF, SRTN, RR&lt;/li&gt;
&lt;li&gt;priority: multi-level, multi-level with feedback&lt;/li&gt;
&lt;li&gt;portional share: lottery, stride&lt;/li&gt;
&lt;li&gt;real time: EDF, rate monotonic&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FIFO: no preemption, running time is known&lt;/p&gt;
&lt;p&gt;SJF: shortest job first, non-preemption, starvation(short job keep arriving)&lt;/p&gt;
&lt;p&gt;SRTN: shortest remaining time next, preemption&lt;/p&gt;
&lt;p&gt;RR(round robin/time-slicing): q-&amp;gt;0, not realistic, translation lookaside buffer flushing and caching problem&lt;br&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7396/26647571664_6c5a83b3a3.jpg&quot; width=&quot;500&quot; height=&quot;361&quot;&gt;&lt;/p&gt;
&lt;p&gt;max-min fairness: a fair service maximize the service of the customer receiving the poorest service(goal of RR)&lt;/p&gt;
&lt;p&gt;priority queueing: for interactive job, multi level queues, each queue use RR&lt;/p&gt;
&lt;p&gt;multi-level feedback queue: time-sliced, priority-based, preemptive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when thread created, get highest priority&lt;/li&gt;
&lt;li&gt;if using a full time slice, decrease priority&lt;/li&gt;
&lt;li&gt;if block before using up full time slice, increase priority&lt;/li&gt;
&lt;li&gt;&lt;p&gt;aging: if a job hasn’t run for long, increase priority&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c4.staticflickr.com/8/7341/27184609331_7e4f90e93c.jpg&quot; width=&quot;500&quot; height=&quot;436&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;lottery scheduling: a lottery is held for every scheduling decision&lt;/p&gt;
&lt;p&gt;stride scheduling: time-sliced, priority-based, preemptive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;every thread assigned a priority named pass value, single queue, smallest pass value thread first&lt;/li&gt;
&lt;li&gt;every thread assigned a stride value, computed according to distribution of tickets in a lottery scheduling scheme&lt;/li&gt;
&lt;li&gt;shedule thread with smallest pass value&lt;/li&gt;
&lt;li&gt;set global pass value to be the pass value of new coming thread&lt;/li&gt;
&lt;li&gt;increment thread’s pass value by stride value when finishing running&lt;/li&gt;
&lt;li&gt;loop&lt;/li&gt;
&lt;li&gt;interactive threads get higher priority&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in hard real time system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;find schedule satisfying constraints&lt;/li&gt;
&lt;li&gt;uniprocessor:&lt;ul&gt;
&lt;li&gt;rate-monotonic scheduling of cyclic chores&lt;/li&gt;
&lt;li&gt;earliest deadline first(EDF)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;interrupt don’t interfere with schedule, execution time is predictable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rate-monotonic: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each chore is handled by a thread with priority 1/P&lt;/li&gt;
&lt;li&gt;&lt;p&gt;preemptive, priority scheduling&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c1.staticflickr.com/8/7304/26647571504_2ebf8ede53.jpg&quot; width=&quot;500&quot; height=&quot;260&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;priority inversion: high-priority thread A block on mutex 1, low-priority thread C hold mutex 1, C cannot run because medium-priority thread B is running&lt;/p&gt;
&lt;p&gt;solution: give thread C the same priority as thread A&lt;/p&gt;
&lt;p&gt;multiple processors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cache affinity: a thread running on same processor every time would be cheaper&lt;/li&gt;
&lt;li&gt;use one run queue per processor&lt;/li&gt;
&lt;li&gt;scheduler may do load balancing&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7418/26647571444_3d067112a5.jpg&quot; width=&quot;500&quot; height=&quot;430&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Operating System" scheme="http://www.byteants.com/categories/Studying-Notes/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>Stock Search Android APP</title>
    <link href="http://www.byteants.com/2016/05/24/Stock%20Search%20Android%20APP/"/>
    <id>http://www.byteants.com/2016/05/24/Stock Search Android APP/</id>
    <published>2016-05-24T07:00:00.000Z</published>
    <updated>2016-05-26T02:21:54.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7387/27187459336_584bde318b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This project allows user to search stock information, such as details, trends and news. When user type in some words, this application will autocomplete and provide related companies for being chosen. Moreover, favorite list stores the companies which user is interested in and user can delete the company form favorite list by slide the item in the list. This project contains lots of basic skills of Android development. It is absolutely a good practice if you are interested.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Automatically-Complete&quot;&gt;&lt;a href=&quot;#Automatically-Complete&quot; class=&quot;headerlink&quot; title=&quot;Automatically Complete&quot;&gt;&lt;/a&gt;Automatically Complete&lt;/h3&gt;&lt;p&gt;To realize the autocomplete function, the application need to connect with server &lt;a href=&quot;http://dev.markitondemand.com/MODApis/Api/v2/Lookup/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://dev.markitondemand.com/MODApis/Api/v2/Lookup/&lt;/a&gt; to search related companies based on user’s input. It will use Android’s AsyncTask class to realize the search function background. After the data is fetched from the server, they would be shown as a list. In this list, we need to create an adapter for the list. The adapter’s XML file and its class should create for this application. The AsyncTask class and List’s adapter will be talked in another two blogs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7662/26614698444_5848b0d960.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Stock-Details&quot;&gt;&lt;a href=&quot;#Stock-Details&quot; class=&quot;headerlink&quot; title=&quot;Stock Details&quot;&gt;&lt;/a&gt;Stock Details&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7302/27187459276_16256d841c.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;When user select one element from the autocomplete list and press the “GET QUOTE” button, it will create a new tabbed layout activity. The tabs contain stock’s current detail, history chart and news. It also fetch today’s trend picture on the detail tab. When user click on the picture, it will pop up a dialog which contains the today’s trend picture and user can zoom up and down the picture by multiple touch.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7036/26617457123_36e8b40211.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Highlight-Chart&quot;&gt;&lt;a href=&quot;#Highlight-Chart&quot; class=&quot;headerlink&quot; title=&quot;Highlight Chart&quot;&gt;&lt;/a&gt;Highlight Chart&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7795/26614698304_b1b9073487.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This tab shows the trend of the company’s stock. This has to implemented using a WebView using HighCharts API. We need put the HTML file into the assets directory so as to be shown in WebView.&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadHistoricalChartWebView&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String stockSymbol)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        WebView browser = (WebView) findViewById(R.id.webView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* set loading of images */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        browser.getSettings().setLoadsImagesAutomatically(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/* enable JS */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        browser.getSettings().setJavaScriptEnabled(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        String url = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            url = &lt;span class=&quot;string&quot;&gt;&quot;file:///android_asset/historicalChart.html?symbol=&quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    URLEncoder.encode(stockSymbol, &lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        browser.loadUrl(url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;News&quot;&gt;&lt;a href=&quot;#News&quot; class=&quot;headerlink&quot; title=&quot;News&quot;&gt;&lt;/a&gt;News&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://c7.staticflickr.com/8/7163/27124658422_6ce91b4e4b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;In order to get the news about this company, this application also use AsyncTask class to fetch data from server and then show the data in a list when all data are fetched. Similarly, we also to create an adapter for the items in the list.&lt;/p&gt;
&lt;p&gt;Share on Facebook&lt;br&gt;If you like, this application can share company’s stock on Facebook. We will use the Facebook SDK in this application. The detail steps are here: &lt;a href=&quot;https://developers.facebook.com/docs/sharing/android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developers.facebook.com/docs/sharing/android&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;Favorite-List&quot;&gt;&lt;a href=&quot;#Favorite-List&quot; class=&quot;headerlink&quot; title=&quot;Favorite List&quot;&gt;&lt;/a&gt;Favorite List&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7497/26616152914_c49698b6a4.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7155/26616152964_98c403d068.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;User can click the right corner’s star to add or remove from the favorite list. User also can delete the company from favorite at MainActivity by sliding the items. The slide deleting function is realize as following:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DynamicListView mDynamicListView = (DynamicListView) findViewById(R.id.favoritesListView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mDynamicListView.enableSwipeToDismiss(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; OnDismissCallback() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onDismiss&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(@NonNull &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; ViewGroup listView, @NonNull &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] reverseSortedPositions)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        android.app.AlertDialog.Builder whetherDelete = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; android.app.AlertDialog.Builder(MainActivity.&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        whetherDelete.setTitle(&lt;span class=&quot;string&quot;&gt;&quot;Want to delete&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        String name = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position : reverseSortedPositions) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            name = adapter.getItem(position).getFavoriteName();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        whetherDelete.setTitle(&lt;span class=&quot;string&quot;&gt;&quot;Want to delete &quot;&lt;/span&gt; + name + &lt;span class=&quot;string&quot;&gt;&quot; from favorites?&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        whetherDelete.setPositiveButton(&lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DialogInterface.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DialogInterface dialog, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; id)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; position : reverseSortedPositions) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    adapter.remove(adapter.getItem(position));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        whetherDelete.setNegativeButton(&lt;span class=&quot;string&quot;&gt;&quot;CANCLE&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DialogInterface.OnClickListener() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(DialogInterface dialog, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; which)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        whetherDelete.show();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        );&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;This project contains lots of characteristics of Android development. It contains creating new activity, Asyntask, ListView, REST and Facebook SDK. If you are the first time to touch Android development and want to become familiar with it, you can create a same application above.&lt;br&gt;-&lt;a href=&quot;https://github.com/spacime/Projects/tree/master/Stock%20Search%20Android%20APP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7387/27187459336_584bde318b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;This project allows user to search stock information, such as details, trends and news. When user type in some words, this application will autocomplete and provide related companies for being chosen. Moreover, favorite list stores the companies which user is interested in and user can delete the company form favorite list by slide the item in the list. This project contains lots of basic skills of Android development. It is absolutely a good practice if you are interested.&lt;br&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.byteants.com/categories/Project/"/>
    
      <category term="Android Develop" scheme="http://www.byteants.com/categories/Project/Android-Develop/"/>
    
    
      <category term="JSON" scheme="http://www.byteants.com/tags/JSON/"/>
    
      <category term="Android" scheme="http://www.byteants.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Operating-System Design</title>
    <link href="http://www.byteants.com/2016/05/24/studying%20notes.operating%20system.chapter%204/"/>
    <id>http://www.byteants.com/2016/05/24/studying notes.operating system.chapter 4/</id>
    <published>2016-05-24T07:00:00.000Z</published>
    <updated>2016-05-29T02:01:01.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7785/27236221225_908bbf2490.jpg&quot; width=&quot;500&quot; height=&quot;253&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;OS components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;processor management&lt;/li&gt;
&lt;li&gt;memory management&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I/O management&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c2.staticflickr.com/8/7779/26630610713_6e2b4d1e67.jpg&quot; width=&quot;500&quot; height=&quot;351&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;purpose of process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hold address space&lt;/li&gt;
&lt;li&gt;hold a group of threads&lt;/li&gt;
&lt;li&gt;hold references to open files nad other execution context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;address space: set of addresses that threads can usefully reference&lt;/p&gt;
&lt;p&gt;categories of I/O:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block I/O: mapping files into address space to perform I/O, block/page is basic unit&lt;/li&gt;
&lt;li&gt;sequential I/O: use system call(read() and write()) to perform I/O&lt;/li&gt;
&lt;li&gt;read a file like reading from the keyboard, produce output should also use same code to write to a file or wirte to a network&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hardware Abstraction Layer(HAL): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a portable interface to machine configuration and processor-specific operations within the kernel&lt;/li&gt;
&lt;li&gt;&lt;p&gt;most OS is machine and processor independent&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c4.staticflickr.com/8/7444/26630610803_7f73a7bfbd.jpg&quot; width=&quot;500&quot; height=&quot;314&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;porting OS to new computer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;writing new HAL routines&lt;/li&gt;
&lt;li&gt;relink with kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Monolithic-Kernel&quot;&gt;&lt;a href=&quot;#Monolithic-Kernel&quot; class=&quot;headerlink&quot; title=&quot;Monolithic Kernel&quot;&gt;&lt;/a&gt;Monolithic Kernel&lt;/h2&gt;&lt;h3 id=&quot;A-Framework-for-Devices&quot;&gt;&lt;a href=&quot;#A-Framework-for-Devices&quot; class=&quot;headerlink&quot; title=&quot;A Framework for Devices&quot;&gt;&lt;/a&gt;A Framework for Devices&lt;/h3&gt;&lt;p&gt;device is identified by two numbers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;major device number: identifies the device driver&lt;/li&gt;
&lt;li&gt;&lt;p&gt;minor device number: device index for all devices managed by this device driver&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c6.staticflickr.com/8/7589/26630610893_ff840ae996.jpg&quot; width=&quot;500&quot; height=&quot;353&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;devices are refered in /dev direcory in file system, as special file, don’t contain data&lt;/p&gt;
&lt;p&gt;approach to set up device: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;statically allocated array(sdevsw): &lt;ul&gt;
&lt;li&gt;kernel was statically configured to contain device-specific information&lt;/li&gt;
&lt;li&gt;kernel must custom configured for each installation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;device probing: &lt;ul&gt;
&lt;li&gt;allow device to be found and automatically configured when booting&lt;/li&gt;
&lt;li&gt;kernel still contain all device drivers&lt;/li&gt;
&lt;li&gt;each device driver includes a probe routine&lt;/li&gt;
&lt;li&gt;allow kernel image built for a number of similar installations not identical ones&lt;/li&gt;
&lt;li&gt;boot time is long, impractical as supported devices too much&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;meta-drivers: &lt;ul&gt;
&lt;li&gt;meta-driver handle a particular kind of bus&lt;/li&gt;
&lt;li&gt;installed into kernel&lt;/li&gt;
&lt;li&gt;device interact with meta-driver via USB protocol&lt;/li&gt;
&lt;li&gt;connect and select appropriate device driver loading into kernel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Processes-amp-Threads&quot;&gt;&lt;a href=&quot;#Processes-amp-Threads&quot; class=&quot;headerlink&quot; title=&quot;Processes &amp;amp; Threads&quot;&gt;&lt;/a&gt;Processes &amp;amp; Threads&lt;/h3&gt;&lt;p&gt;process life cycle: run(start)-&amp;gt;zombie&lt;/p&gt;
&lt;p&gt;process relationships:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have a process hierarchy, root is init process&lt;/li&gt;
&lt;li&gt;&lt;p&gt;when one process exit, its children link to init process&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c2.staticflickr.com/8/7454/26630610953_c447e76bc1.jpg&quot; width=&quot;500&quot; height=&quot;314&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when forking, only copy current thread, unlock all mutex before fork()&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7740/27236222105_26f024b631.jpg&quot; width=&quot;500&quot; height=&quot;88&quot;&gt;&lt;/p&gt;
&lt;p&gt;thread life cycle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;runnable(start)-&amp;gt;running: scheduler switch&lt;/li&gt;
&lt;li&gt;running-&amp;gt;runnable: scheduler switch&lt;/li&gt;
&lt;li&gt;running-&amp;gt;waiting: blocking call&lt;/li&gt;
&lt;li&gt;waiting-&amp;gt;runnable: unblocked by another thread or interrupt handler&lt;/li&gt;
&lt;li&gt;&lt;p&gt;running-&amp;gt;terminated: pthread_exit()&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c5.staticflickr.com/8/7334/26961087060_24f4f731f3.jpg&quot; width=&quot;500&quot; height=&quot;215&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;deleting TCB and stack space:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if not detached: the thread call pthread_join()&lt;/li&gt;
&lt;li&gt;if detached: &lt;ul&gt;
&lt;li&gt;use a special reaper thread&lt;/li&gt;
&lt;li&gt;queue threads on list and other threads free them if convenient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Low-Level-Kernel&quot;&gt;&lt;a href=&quot;#Low-Level-Kernel&quot; class=&quot;headerlink&quot; title=&quot;Low-Level Kernel&quot;&gt;&lt;/a&gt;Low-Level Kernel&lt;/h3&gt;&lt;p&gt;terminal: client program interact with a remote system, login session is on the target machine&lt;/p&gt;
&lt;p&gt;interact with terminal device:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;characters displayed sent to output routine of serial-line driver&lt;/li&gt;
&lt;li&gt;make a call to input routine to fetch characters typed at keyboard&lt;/li&gt;
&lt;li&gt;not straight-forward&lt;/li&gt;
&lt;li&gt;need output buffer and input buffer for characters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;application thread place characters on output queue and take from input queue&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7499/26961087210_4335716cfb.jpg&quot; width=&quot;500&quot; height=&quot;290&quot;&gt;&lt;/p&gt;
&lt;p&gt;use interrupt handler for keyboard activity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in read-completion interrupt, handler move character from device to input queue, issue another request to device and block, must mask interrupt when taking characters&lt;/li&gt;
&lt;li&gt;in write-completion interrupt, handler move character from output queue to keyboard, issue another request to device. if application write to empty queue, setup handler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;two input queues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one for partial-line, subject to editing&lt;/li&gt;
&lt;li&gt;the other contain characters from complete lines&lt;/li&gt;
&lt;li&gt;handler move character from device to partial-line queue&lt;/li&gt;
&lt;li&gt;if input is carriage-return, entire content of partial-line queue move to completed-line queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for reusability, a separate module, line-discipline, provide common character-handling code, interact with any device driver&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7451/26961087280_322c2fcecb.jpg&quot; width=&quot;500&quot; height=&quot;268&quot;&gt;&lt;/p&gt;
&lt;p&gt;put terminal driver and line-discipline module in kernel&lt;/p&gt;
&lt;p&gt;modern system about terminal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bit-mapped displays, keyboards, mice connected via USB&lt;/li&gt;
&lt;li&gt;window manager implements display, determine applications receiving input&lt;/li&gt;
&lt;li&gt;applications can receive input, send output over network&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use pseudoterminals&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c5.staticflickr.com/8/7612/26961087420_8cff958ca2.jpg&quot; width=&quot;500&quot; height=&quot;258&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;network communication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;device is Network Interface Card(NIC)&lt;/li&gt;
&lt;li&gt;data in packet&lt;/li&gt;
&lt;li&gt;&lt;p&gt;data processed via network-protocol modules, protocols are layered on top of one another&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c7.staticflickr.com/8/7312/26961087470_8805a32cd8.jpg&quot; width=&quot;500&quot; height=&quot;319&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;performance about network data:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pass packet from one module to next without copying data&lt;/li&gt;
&lt;li&gt;append/remove headers&lt;/li&gt;
&lt;li&gt;hold on packets for possible retransmission&lt;/li&gt;
&lt;li&gt;request and respond to time-out&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create pointer point to head and data of packet in each layer&lt;/li&gt;
&lt;li&gt;copy and move pointer, not packet&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use callback mechanism to implement timeout&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c6.staticflickr.com/8/7284/26630611453_e4d4b19d45.jpg&quot; width=&quot;500&quot; height=&quot;340&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Rethinking-Operating-System-Structure&quot;&gt;&lt;a href=&quot;#Rethinking-Operating-System-Structure&quot; class=&quot;headerlink&quot; title=&quot;Rethinking Operating-System Structure&quot;&gt;&lt;/a&gt;Rethinking Operating-System Structure&lt;/h2&gt;&lt;p&gt;monolithic kernel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;good performance, but bad reliability&lt;/li&gt;
&lt;li&gt;solve it by virtual machines/microkernel&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Virtual-Machine&quot;&gt;&lt;a href=&quot;#Virtual-Machine&quot; class=&quot;headerlink&quot; title=&quot;Virtual Machine&quot;&gt;&lt;/a&gt;Virtual Machine&lt;/h3&gt;&lt;p&gt;virtual machine: applications, OS, virtual machine, virtual machine monitor(VMM), hardware&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7419/26630611573_dedb030cb9.jpg&quot; width=&quot;500&quot; height=&quot;239&quot;&gt;&lt;/p&gt;
&lt;p&gt;VMM is a synchronization construct allow executing entities to have mutual exclusioin and ability to wait(block) for a condition becoming true&lt;/p&gt;
&lt;p&gt;virtual machine is abstraction of hardware&lt;/p&gt;
&lt;p&gt;entire virtual machine in user mode of the real machine, VMM in privileged mode of the real machine&lt;/p&gt;
&lt;p&gt;VMM keep track of whether virtual machine in virtual privileged mode(OS) or virtual user mode(application)&lt;/p&gt;
&lt;p&gt;process in virtual machine is real processor:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instuctions are executed&lt;/li&gt;
&lt;li&gt;traps are generated just as on real machine:&lt;ul&gt;
&lt;li&gt;trap handler indexed by trap number in hardware-mandated jump table in virtual machine&lt;/li&gt;
&lt;li&gt;VMM find address of virtual machine’s trap handler and transfer control to it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;virtual machine(not equal to software emulator) contain every hardware components represented by data structures and code&lt;/p&gt;
&lt;p&gt;sensitive instruction: an instruction will change something in the hardware/processor, must be privileged instruction&lt;/p&gt;
&lt;p&gt;advantage of virtual machine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;good structuring technique for multi-user system&lt;/li&gt;
&lt;li&gt;good for debugging and testing&lt;/li&gt;
&lt;li&gt;adapt to hardware change in software&lt;/li&gt;
&lt;li&gt;multiple OSes on one machine&lt;/li&gt;
&lt;li&gt;server consolidation and service isolation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;actions on real machine:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;(none)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;user mode&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;privileged mode&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;non-sensitive instruction&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;execute fine(communicate with hardware directly)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;executes fine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;errant instruction&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;traps to kernel&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;traps to kernel&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;sensitive instruction&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;traps to kernel&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;executes fine&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;actions on virtual machine:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;(none)&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;virtual user mode&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;virtual privileged mode&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;non-sensitive instruction&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;executes fine&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;executes fine&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;errant instruction&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;traps to VMM; VMM causes trap to occur on Guest OS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;traps to VMM; VMM causes trap to occur on Guest OS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;sensitive instruction&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;traps to VMM; VMM causes trap to occur on Guest OS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;traps to VMM;VMM verifies and emulates instruction&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;virtualization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;full virtualization&lt;/li&gt;
&lt;li&gt;paravirtualization&lt;/li&gt;
&lt;li&gt;containers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;difference on IBM and Intel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IBM have all sensitive instructions are privileged instructions, Intel don’t have all&lt;/li&gt;
&lt;li&gt;IBM’s I/O operation done via channel programs in memory, Intel’s done via memory-mapped addresses&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;rings: Intel have 4 modes: kernel, 1, 2, apps&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c6.staticflickr.com/8/7659/26630610573_aaa13a85d4.jpg&quot; width=&quot;460&quot; height=&quot;443&quot;&gt;&lt;/p&gt;
&lt;p&gt;solution for Intel sensitive instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;binary rewriting(vmware): replace sensitive instructions with hypercall(trap to VMM)&lt;/li&gt;
&lt;li&gt;hardware virtualization: create root mode&lt;/li&gt;
&lt;li&gt;paravirtualization(Xen): modify guestOS code, hypervisor call&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;solution for Intel I/O operation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;vmware:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;host/guest model: VMM part of hostOS,VMApp&lt;/li&gt;
&lt;li&gt;&lt;p&gt;split driver in VMM&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c5.staticflickr.com/8/7290/26629455204_65d8507e18.jpg&quot; width=&quot;500&quot; height=&quot;320&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Xen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;no driver in guest&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c8.staticflickr.com/8/7562/26630610463_12338fdec0.jpg&quot; width=&quot;500&quot; height=&quot;320&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;VM memory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;process: virtual virtual memory&lt;/li&gt;
&lt;li&gt;Guest OS: virtual real memory&lt;/li&gt;
&lt;li&gt;VMM: real memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;solution for mapping:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each VM has page table, VMM has own page table, merge into shadow page table(for each VM)&lt;/li&gt;
&lt;li&gt;when updating VM’s page table, shadow page table must update&lt;/li&gt;
&lt;li&gt;&lt;p&gt;poor performance&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c8.staticflickr.com/8/7624/26630610303_fe0ae04b77.jpg&quot; width=&quot;500&quot; height=&quot;284&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;direct translation: make a hypercall when updating&lt;/li&gt;
&lt;li&gt;extended page table: traverse two tables in sequence and converse it by itself(visit memory 4 times)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Micro-Kernel&quot;&gt;&lt;a href=&quot;#Micro-Kernel&quot; class=&quot;headerlink&quot; title=&quot;Micro Kernel&quot;&gt;&lt;/a&gt;Micro Kernel&lt;/h3&gt;&lt;p&gt;microkernels contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;process management&lt;/li&gt;
&lt;li&gt;memory management&lt;/li&gt;
&lt;li&gt;device drivers&lt;/li&gt;
&lt;li&gt;message passing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;messaging service: client create request port, response port and capability(key) to send data&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7305/27236221355_28cc1bb87a.jpg&quot; width=&quot;500&quot; height=&quot;331&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://c2.staticflickr.com/8/7785/27236221225_908bbf2490.jpg&quot; width=&quot;500&quot; height=&quot;253&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Operating System" scheme="http://www.byteants.com/categories/Studying-Notes/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>Basic Concepts of Operating System</title>
    <link href="http://www.byteants.com/2016/05/22/studying%20notes.operating%20system.chapter%203/"/>
    <id>http://www.byteants.com/2016/05/22/studying notes.operating system.chapter 3/</id>
    <published>2016-05-22T07:00:00.000Z</published>
    <updated>2016-05-29T02:01:13.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7446/27153713506_f5fa809db2_z.jpg&quot; width=&quot;640&quot; height=&quot;207&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Context-Switching&quot;&gt;&lt;a href=&quot;#Context-Switching&quot; class=&quot;headerlink&quot; title=&quot;Context Switching&quot;&gt;&lt;/a&gt;Context Switching&lt;/h3&gt;&lt;p&gt;OS switch applications transparently, each application don’t know other applications’ existance&lt;/p&gt;
&lt;p&gt;execution context contains(stored in TCB):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;current state of the thread&lt;/li&gt;
&lt;li&gt;CPU registers: instruction pointer, stack pointer, base/frame pointer&lt;/li&gt;
&lt;li&gt;stack&lt;/li&gt;
&lt;li&gt;open files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in stack frame, a routine should store from high to low address:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;args, eip, ebp, saved registers, local variables&lt;/li&gt;
&lt;li&gt;esp points to the end of current stack frame, prepare for next stack frame&lt;/li&gt;
&lt;li&gt;eip contains caller’s instruction pointer register, is return address&lt;/li&gt;
&lt;li&gt;ebp contains caller’s base(frame) pointer register, link to the caller’s ebp&lt;/li&gt;
&lt;li&gt;eax contains return value of a function&lt;/li&gt;
&lt;li&gt;&lt;p&gt;args and eip are set by caller, others are set by callee&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7686/27153713456_878c2b8cc1_z.jpg&quot; width=&quot;593&quot; height=&quot;414&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;there can be stuff between stack frames&lt;/p&gt;
&lt;p&gt;routine code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set up stack frame&lt;/li&gt;
&lt;li&gt;push args&lt;/li&gt;
&lt;li&gt;pop args, get result&lt;/li&gt;
&lt;li&gt;set return value and restore frame&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;coroutine linkage: threads transfer control from one thread to another&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7272/27153713396_00a5b5750d_z.jpg&quot; width=&quot;640&quot; height=&quot;378&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;thread_t&lt;/span&gt; *next_thread)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CurrentThread-&amp;gt;SP=SP;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	CurrentThread=next_thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SP=CurrentThread-&amp;gt;SP;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;if TCB were user-space data structure, threads are switched without getting the kernel involved&lt;/p&gt;
&lt;p&gt;one thread enters the switch() call, and a different thread leaves the switch() call&lt;/p&gt;
&lt;p&gt;system calls: user code access kernel in a controlled manner:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;from user mode to priviledged mode, from user stack to kernel stack&lt;/li&gt;
&lt;li&gt;set things up&lt;/li&gt;
&lt;li&gt;traps(software interrupt) into kernel by executing a special machine instruction&lt;/li&gt;
&lt;li&gt;&lt;p&gt;kernel handles the trap&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7246/27153713266_bd0ef7981c.jpg&quot; width=&quot;294&quot; height=&quot;220&quot;&gt;&lt;br&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7302/27091544582_e364ffd921.jpg&quot; width=&quot;463&quot; height=&quot;272&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;process on trap:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;trap into kernel with interrupt disabled, set to kernel mode&lt;/li&gt;
&lt;li&gt;Hardware Abstractioin Layer save IP and SP in interrupt stack, HAL is hardware-dependent&lt;/li&gt;
&lt;li&gt;HAL set SP to point to kernel stack&lt;/li&gt;
&lt;li&gt;HAL set IP to interrupt handler&lt;/li&gt;
&lt;li&gt;pop IP and SP from interrupt stack, push onto kernel stack, re-enable interrupt&lt;/li&gt;
&lt;li&gt;on return from trap handler, disable interrupt, return to user process&lt;/li&gt;
&lt;li&gt;similar to hardware interrupt&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;signal generated by kernel, delivered to user process&lt;br&gt;interrupt generated by hardware, delivered to HAL then kernel&lt;/p&gt;
&lt;p&gt;when interrupt occur:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;processor switch to an interrupt context&lt;/li&gt;
&lt;li&gt;previous context can be a thread context/another interrupt context&lt;/li&gt;
&lt;li&gt;when interrupt handler finish, processor resume original context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;interrupt context stored in interrupt stack: borrowed kernel stack from the thread it is interrupting&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7613/27153713136_8abf3ded99.jpg&quot; width=&quot;500&quot; height=&quot;346&quot;&gt;&lt;/p&gt;
&lt;p&gt;the handler of the most recent interrupt must run to completion, so interrupt service routine should do as little as possible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interrupt handler place most work on a queue, doing them in some other context later&lt;/li&gt;
&lt;li&gt;still need to do 2 things in interrupt handler: unblock a kernel thread, start the next I/O operation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a interrupt is pending if generated but masked, when unmasked, it’s delievered&lt;/p&gt;
&lt;p&gt;approaches to mask interrupt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bit vector/mask:&lt;ul&gt;
&lt;li&gt;set a bit to enable/disable such interrupt&lt;/li&gt;
&lt;li&gt;when an interrupt occur, the corresponding bit is set to block other interrupt of the same class&lt;/li&gt;
&lt;li&gt;cleared when the handler return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;hierarchical interrupt levels:&lt;ul&gt;
&lt;li&gt;processor set Interrupt Priority Level in hardware register&lt;/li&gt;
&lt;li&gt;all interrupt with current or lower level are masked&lt;/li&gt;
&lt;li&gt;kernel mask interrupt by setting IPL to a value&lt;/li&gt;
&lt;li&gt;when an interrupt occur, IPL is set to that value&lt;/li&gt;
&lt;li&gt;restore previous value on handler return&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Input-Output-Architectures&quot;&gt;&lt;a href=&quot;#Input-Output-Architectures&quot; class=&quot;headerlink&quot; title=&quot;Input/Output Architectures&quot;&gt;&lt;/a&gt;Input/Output Architectures&lt;/h3&gt;&lt;p&gt;memory-mapped I/O:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;device connect to controller, controller listen on the bus to determine request&lt;/li&gt;
&lt;li&gt;memory controller pass bus request to memory&lt;/li&gt;
&lt;li&gt;&lt;p&gt;other controller process request, response to address&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7492/27153713036_eb343eebd6.jpg&quot; width=&quot;500&quot; height=&quot;148&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;categories of devices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PIO(programmed I/O): read/write data in controller registers one byte at a time&lt;/li&gt;
&lt;li&gt;DMA(direct memory access):&lt;ul&gt;
&lt;li&gt;controller perform I/O itself&lt;/li&gt;
&lt;li&gt;process tell controller where to transfer data&lt;/li&gt;
&lt;li&gt;controller take over and transfer data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;device driver:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a standard interface to OS&lt;/li&gt;
&lt;li&gt;code in it know how to talk to device&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OS treat I/O in a device-independent manner, using an array of function pointers&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7349/27153712966_05842fd774.jpg&quot; width=&quot;500&quot; height=&quot;218&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C++ polymorphism achieved using virtual base class, each device driver is a subclass, those class is often asynchronous&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; disk&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; handle_t &lt;span class=&quot;title&quot;&gt;start_read&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;request_t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; handle_t &lt;span class=&quot;title&quot;&gt;start_write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;request_t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; status_t &lt;span class=&quot;title&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;handle_t&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;virtual&lt;/span&gt; status_t &lt;span class=&quot;title&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Dynamic-Storage-Allocation&quot;&gt;&lt;a href=&quot;#Dynamic-Storage-Allocation&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Storage Allocation&quot;&gt;&lt;/a&gt;Dynamic Storage Allocation&lt;/h3&gt;&lt;p&gt;dynamic storage allocation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;best-fit&lt;/li&gt;
&lt;li&gt;first-fit&lt;/li&gt;
&lt;li&gt;buddy system&lt;/li&gt;
&lt;li&gt;slab allocation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;first-fit works better compared to best-fit, best-fit leave many small memory regions, both have external gragmentation&lt;/p&gt;
&lt;p&gt;fragmentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;internal fragmentation&lt;/li&gt;
&lt;li&gt;external fragmentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;first-fit data structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a doubly-linked list of free blocks&lt;/li&gt;
&lt;li&gt;free block contains: &lt;ul&gt;
&lt;li&gt;prefix: in-use flag(4KB), size(total)(4KB), prev(4KB), next(4KB)&lt;/li&gt;
&lt;li&gt;suffix: in-use flag(4KB), size(total)(4KB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;in-use block contains:&lt;ul&gt;
&lt;li&gt;prefix: in-use flag(4KB), size(total)(4KB)&lt;/li&gt;
&lt;li&gt;suffix: in-use flag(4KB), size(total)(4KB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;free block: check the block before it and after it, if neither of them are free, need to insert this block into the free list, else need to merge/coalesce the block with neighboring free block&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7326/27153712866_dd95368e49.jpg&quot; width=&quot;500&quot; height=&quot;299&quot;&gt;&lt;br&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7632/27153712796_8e486553c7.jpg&quot; width=&quot;500&quot; height=&quot;224&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;first-fit algorithm: malloc() is O(n), free(ptr) is O(n)&lt;/p&gt;
&lt;p&gt;buddy system: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;blocks evenly divided into two as buddies with each other&lt;/li&gt;
&lt;li&gt;can only merge with buddy&lt;/li&gt;
&lt;li&gt;&lt;p&gt;have internal fragmentation&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7022/27153712726_4acdbab3fe.jpg&quot; width=&quot;500&quot; height=&quot;311&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;buddy system data structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;doubly-linked list free list indexed by k&lt;/li&gt;
&lt;li&gt;&lt;p&gt;each block contains: in-use bit, size, next and prev links for free list&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7773/27091543002_b8646b07f3.jpg&quot; width=&quot;500&quot; height=&quot;107&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;slab allocation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;set up separate cache for each type of object in kernel&lt;/li&gt;
&lt;li&gt;contiguous sets of pages called slabs, allocated to hold objects&lt;/li&gt;
&lt;li&gt;slabs are initialized in advance, objects taking from the existing slabs in cache&lt;/li&gt;
&lt;li&gt;&lt;p&gt;free object: simply marked as free&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7066/27091542612_e2332f15fd.jpg&quot; width=&quot;500&quot; height=&quot;439&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Linking-amp-Loading&quot;&gt;&lt;a href=&quot;#Linking-amp-Loading&quot; class=&quot;headerlink&quot; title=&quot;Linking &amp;amp; Loading&quot;&gt;&lt;/a&gt;Linking &amp;amp; Loading&lt;/h3&gt;&lt;p&gt;location independent: everything in code can be accessed relative to frame pointer, use relative address&lt;/p&gt;
&lt;p&gt;relocation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modify internal reference in memory depends on where module load(exec load program into memory)&lt;/li&gt;
&lt;li&gt;module requiring relocation is relocatable&lt;/li&gt;
&lt;li&gt;modifying module to resolve references is relocation&lt;/li&gt;
&lt;li&gt;program performing relocation is linker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;function of linker:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;relocation&lt;/li&gt;
&lt;li&gt;symbol resolution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;loader load program into memory, relocating loader can also do relocation&lt;/p&gt;
&lt;p&gt;.c file compiled into .o file(relocatable modules), where have instruction for ld, then ld(linker&amp;amp;loader) modify .o file, copy into executable file&lt;/p&gt;
&lt;p&gt;.o file contains data, bss and text sections, each section contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;global symbols&lt;/li&gt;
&lt;li&gt;undefined symbols&lt;/li&gt;
&lt;li&gt;&lt;p&gt;instructions for relocation&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7295/27091542482_4889d5e125.jpg&quot; width=&quot;500&quot; height=&quot;322&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ld’s work:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lay out address space&lt;/li&gt;
&lt;li&gt;allocate memory in pages(4KB)&lt;/li&gt;
&lt;li&gt;main don’t start from location 0, making first page inaccessible&lt;/li&gt;
&lt;li&gt;&lt;p&gt;data segment start at a page boundary so that both segments have different access type(read-only/read-write)&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7346/27091542112_eec607f144.jpg&quot; width=&quot;338&quot; height=&quot;358&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;library:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a collection of .o files&lt;/li&gt;
&lt;li&gt;linker create libraries&lt;/li&gt;
&lt;li&gt;two types: static library, dynamic(shared) library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when compiling, order of libraries matter&lt;/p&gt;
&lt;p&gt;problem for static library:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;execute file must contain everything for execution&lt;/li&gt;
&lt;li&gt;have duplicate code, taking up disk space and memory&lt;/li&gt;
&lt;li&gt;&lt;p&gt;need a way to share code on disk and memory&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7126/26580986714_dd94faff5a.jpg&quot; width=&quot;500&quot; height=&quot;150&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;solutions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;limited sharing: relocate separately for each process&lt;/li&gt;
&lt;li&gt;prerelocation: relocate libraries ahead of time&lt;/li&gt;
&lt;li&gt;position-independent code: each process maintains a private table, pointed to by register. table contains address of shared routines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;shared libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;called Dynamic-Link Libraries in Windows, and shared objects in Unix&lt;/li&gt;
&lt;li&gt;don’t need to load when program start up, can load on demand&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;disadvantages of shared libraries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;have dependencies&lt;/li&gt;
&lt;li&gt;different versions of same library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;linking and loading on linux with ELF:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x86 ELF&lt;/li&gt;
&lt;li&gt;creating and using a shared library&lt;/li&gt;
&lt;li&gt;substitution&lt;/li&gt;
&lt;li&gt;shared library details&lt;/li&gt;
&lt;li&gt;versioning&lt;/li&gt;
&lt;li&gt;dynamic linking&lt;/li&gt;
&lt;li&gt;interpositioining&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;procedure of invoking program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;given control to ld.so, the run-time linker&lt;/li&gt;
&lt;li&gt;ld does some initial set up of linkages&lt;/li&gt;
&lt;li&gt;call the actual program code&lt;/li&gt;
&lt;li&gt;may called on later to do some further loading and linking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;versioning about libmyputs.so.1.0:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;real name: libmyputs.so.1.0&lt;/li&gt;
&lt;li&gt;soname: libmyputs.so.1&lt;/li&gt;
&lt;li&gt;linker name: libmyputs.so&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Booting&quot;&gt;&lt;a href=&quot;#Booting&quot; class=&quot;headerlink&quot; title=&quot;Booting&quot;&gt;&lt;/a&gt;Booting&lt;/h3&gt;&lt;p&gt;boot: load its OS into memory&lt;/p&gt;
&lt;p&gt;solution: load a tiny OS into memory(bootstrap loader): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hard-wired to always run the code contained in its on-board read-only memory&lt;/li&gt;
&lt;li&gt;read bootstrap loader from floppy disk&lt;/li&gt;
&lt;li&gt;load OS from root directory of first file system on primary disk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;floppy disk would handle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disk device&lt;/li&gt;
&lt;li&gt;on-disk file system&lt;/li&gt;
&lt;li&gt;need the right device driver&lt;/li&gt;
&lt;li&gt;need to know how disk is partitioned&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;new bootstrap loader, basic input-output system(BIOS):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;code stored in read-only memory(ROM)&lt;/li&gt;
&lt;li&gt;configuration data in non-volatile RAM(NVRAM), like CMOS&lt;/li&gt;
&lt;li&gt;provide three functions:&lt;ul&gt;
&lt;li&gt;power-on self test(POST): know where to load boot program&lt;/li&gt;
&lt;li&gt;load/transfer control to boot program&lt;/li&gt;
&lt;li&gt;provide drivers for all device&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;on power-on, CPU execute BIOS(located in last 64KB of first 1GB of address space), start executing startup(the last 16 bytes of this region), jump to POST&lt;/p&gt;
&lt;p&gt;POST:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initialize hardware&lt;/li&gt;
&lt;li&gt;counts memory locations&lt;/li&gt;
&lt;li&gt;find a boot device&lt;/li&gt;
&lt;li&gt;load the Master Boot Record(MBR) from first sector of boot device&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MBR contains magic number, partition table, boot program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;one of partitions in partition table is active, that’s boot point:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;load first sector from it: contains volume boot program&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pass control to it&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7746/26580986494_273a7baf45.jpg&quot; width=&quot;315&quot; height=&quot;472&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;linux booting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;provided by either lilo or grub&lt;/li&gt;
&lt;li&gt;set up stack, clear BSS, uncompress kernel, transfer control to it&lt;/li&gt;
&lt;li&gt;process 0 is created, set up initial page table, turn on address translation&lt;/li&gt;
&lt;li&gt;initialize rest of kernel, create init process, invoke the scheduler&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;BIOS device drivers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;BIO provide drivers for all devices&lt;/li&gt;
&lt;li&gt;these drivers sat in low memory and provided minimal functionality&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7446/27153713506_f5fa809db2_z.jpg&quot; width=&quot;640&quot; height=&quot;207&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Operating System" scheme="http://www.byteants.com/categories/Studying-Notes/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>Multithreaded Programming</title>
    <link href="http://www.byteants.com/2016/05/21/studying%20notes.operating%20system.chapter%202/"/>
    <id>http://www.byteants.com/2016/05/21/studying notes.operating system.chapter 2/</id>
    <published>2016-05-21T07:00:00.000Z</published>
    <updated>2016-05-29T02:01:21.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7236/27058898412_5ae7d856a7.jpg&quot; width=&quot;500&quot; height=&quot;306&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;why using threads rather than just process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;multithreading is a powerful paradigm&lt;/li&gt;
&lt;li&gt;make design cleaner and less buggy&lt;/li&gt;
&lt;li&gt;run faster without explicitly giving up CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;threads could be implemented in user or kernel space, both have some advantages and disadvantages&lt;/p&gt;
&lt;h3 id=&quot;Threads-Creatioin-amp-Termination&quot;&gt;&lt;a href=&quot;#Threads-Creatioin-amp-Termination&quot; class=&quot;headerlink&quot; title=&quot;Threads Creatioin &amp;amp; Termination&quot;&gt;&lt;/a&gt;Threads Creatioin &amp;amp; Termination&lt;/h3&gt;&lt;p&gt;The way to create a POSIX thread: int pthread_create (pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;start_routine is also known as first procedure or thread function, child thread start and end from it&lt;/li&gt;
&lt;li&gt;thread id will be stored in the first argument, may in thread control block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;each thread need its own stack in process address space&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;https://farm8.staticflickr.com/7115/27091257741_e5afd15966.jpg&amp;quot; width=&amp;quot;263&amp;quot; height=&amp;quot;473&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The way to wait for another thread to terminate: int pthread_join (thread_t thread, (void **) ret_value)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;any thread can join with any other thread&lt;/li&gt;
&lt;li&gt;if not pthread_join, the terminated thread goes into a zombie state(free everything except thread control block)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How thread get self-terminate:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return from first procedure&lt;/li&gt;
&lt;li&gt;call pthread_exit(ret_value)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;exit() terminate a process, while pthread_exit() terminate a thread&lt;/p&gt;
&lt;h3 id=&quot;Synchronization&quot;&gt;&lt;a href=&quot;#Synchronization&quot; class=&quot;headerlink&quot; title=&quot;Synchronization&quot;&gt;&lt;/a&gt;Synchronization&lt;/h3&gt;&lt;p&gt;use mutex for synchronization:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;code between pthread_mutex_lock() and pthread_mutex_unlock() for a mutex is called critical section with respect to that mutex&lt;/li&gt;
&lt;li&gt;all critical sections with respect to a particular mutex are mutually exclusive&lt;/li&gt;
&lt;li&gt;The way to set up a mutex: pthread_mutex_t m = PTHREAD_MUTEX_INITIALIZER;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;necessary conditioins for deadlock(mutex 1 wait for mutex 2 and mutex 2 wait for mutex 1):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bounded resources&lt;/li&gt;
&lt;li&gt;wait for resources&lt;/li&gt;
&lt;li&gt;no preemption&lt;/li&gt;
&lt;li&gt;&lt;p&gt;circular wait&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7318/27091257681_8a9f29607a.jpg&quot; width=&quot;500&quot; height=&quot;239&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;solutions for deadlock:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lock hierarchies: organize mutex into levels, can only lock higher level mutex than its holding mutex&lt;/li&gt;
&lt;li&gt;conditional locking: use pthread_mutex_trylock()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;when having one mutex but multiple critical sections: threads can be placed into a queue and wait indefinitely for mutex to become available&lt;/p&gt;
&lt;p&gt;guarded command: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when(guard)[]&lt;/li&gt;
&lt;li&gt;&lt;p&gt;guard+command sequence together is one critical section which can be executed atomically without interruption&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7476/27091257441_1358880c18_z.jpg&quot; width=&quot;640&quot; height=&quot;177&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;semaphores: nonnegative integer&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;P(S) operation: when(S&amp;gt;0)[S=S-1;]&lt;/li&gt;
&lt;li&gt;V(S) operation: [S=S+1]&lt;/li&gt;
&lt;li&gt;categoried as binary semaphore/counting semaphore(initial value differs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;difference between semaphore and mutex:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;one thread lock a mutex, this thread should unlock it&lt;/li&gt;
&lt;li&gt;one thread perform P on semaphore, another thread perform V on it&lt;/li&gt;
&lt;li&gt;mutex is coarse grain, semaphore is fine grain&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;condition variables: a queue of threads waiting for guard to become true&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wait for specific condition to be signaled&lt;/li&gt;
&lt;li&gt;wait for right time to evaluate guard&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the way to set up a condition variable: pthread_cond_t cv = PTHREAD_COND_INITIALIZER;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7617/27091257571_b9e4314798.jpg&quot; width=&quot;306&quot; height=&quot;407&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;wake up condition variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;threads do something potentially change guard&lt;/li&gt;
&lt;li&gt;signal or broadcast the condition&lt;/li&gt;
&lt;li&gt;no guarantee the guard will be true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;execute pthread_cond_wait (pthread_cond_t *cv, pthread_mutex_t *mutex)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when guard is not true&lt;/li&gt;
&lt;li&gt;after mutex is locked can you call this routine&lt;/li&gt;
&lt;li&gt;atomically unlock mutex and wait for signal/broadcast&lt;/li&gt;
&lt;li&gt;when signal/broadcast, return with mutex locked to mutex queue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;thread should call signal/broadcast (change condition variables) only after mutex is locked&lt;/p&gt;
&lt;p&gt;with respect to mutex, a thread could be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;waiting in the mutex queue&lt;/li&gt;
&lt;li&gt;inside the synchronization box&lt;/li&gt;
&lt;li&gt;waiting in the condition variable queue&lt;/li&gt;
&lt;li&gt;outside&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;POSIX condition variables implementation:&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!guard)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pthread_cond_wait(&amp;amp;cv, &amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;statement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_unlock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_cond_broadcast(&amp;amp;cv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_unlock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;conception about barriers: when a thread reaches barrier, it stop and wait for other threads to arrive, then all threads are given signal to proceed and barrier is reset&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;img src=&amp;quot;https://farm8.staticflickr.com/7314/27091257291_3b11013a6e_z.jpg&amp;quot; width=&amp;quot;640&amp;quot; height=&amp;quot;309&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Thread-Safety&quot;&gt;&lt;a href=&quot;#Thread-Safety&quot; class=&quot;headerlink&quot; title=&quot;Thread Safety&quot;&gt;&lt;/a&gt;Thread Safety&lt;/h3&gt;&lt;p&gt;thread safety:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make unithreading libraries safe to run under multithreading&lt;/li&gt;
&lt;li&gt;not equal to reentrant, reentrant code applies to single thread case as well&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;problem and solution with old unix API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;global variables:&lt;ul&gt;
&lt;li&gt;store thread-specific data in TCB&lt;/li&gt;
&lt;li&gt;add reentrant version of system call, like provide a buffer to hold return data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;shared data:&lt;ul&gt;
&lt;li&gt;wrap library calls with synchronizatioin constructs&lt;/li&gt;
&lt;li&gt;fix the libraries&lt;/li&gt;
&lt;li&gt;application can use a mutex&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Deviations&quot;&gt;&lt;a href=&quot;#Deviations&quot; class=&quot;headerlink&quot; title=&quot;Deviations&quot;&gt;&lt;/a&gt;Deviations&lt;/h3&gt;&lt;p&gt;deviation type:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;signal mechanism: ask another thread to deviate from its normal execution path&lt;/li&gt;
&lt;li&gt;cancellation mechanism: force another thread to terminate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;signal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;not software interrupt, performing upcall by OS&lt;/li&gt;
&lt;li&gt;in response to exceptions, external events and user defined events&lt;/li&gt;
&lt;li&gt;&lt;p&gt;can have effect of termination, invocation of a procedure, suspension or resumption&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7160/27091257081_07ea5fa033_z.jpg&quot; width=&quot;640&quot; height=&quot;558&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a signal is pending if generated but blocked, when unblocked, it’s delievered&lt;/p&gt;
&lt;p&gt;send signal to process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int kill (pid_t pid, int sig)&lt;/li&gt;
&lt;li&gt;type Cntrl+C&lt;/li&gt;
&lt;li&gt;kill shell command&lt;/li&gt;
&lt;li&gt;do something illegal&lt;/li&gt;
&lt;li&gt;int pthread_kill (pthread_t thr, int sig): send signal to thread&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;signal handler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;each signal in a process have one handler&lt;/li&gt;
&lt;li&gt;specify a signal handler: sigset(), signal(), sigaction()&lt;/li&gt;
&lt;li&gt;could re-establish signal handler inside signal handler so you can receive the signal more than once&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;async-signal safety:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make code safe working with asynchronous signals&lt;/li&gt;
&lt;li&gt;let any data structure async-signal safe: async signal cannot corrupt data structures&lt;/li&gt;
&lt;li&gt;make async-signal synchronous: use another thread to receive particular signal&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;signal mask:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stored in TCB&lt;/li&gt;
&lt;li&gt;a set of signals represented as a set of bits, 1 means blocked&lt;/li&gt;
&lt;li&gt;change signal mask: int sigprocmask (int SIG_BLOCK/SIG_UNBLOCK/SIG_SETMASK, const sigset_t *set, sigset_t *old);&lt;/li&gt;
&lt;li&gt;sigset_t: sigemptyset(), sigaddset(), sigdelset()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sigsuspend()/sigwait(): atomically unblocks signal and waits for it&lt;/p&gt;
&lt;p&gt;In multi-threaded process, signal is delivered to a thread chosen at random, could block other unrelative threads to solve it&lt;/p&gt;
&lt;p&gt;signal generated while a process is blocked in a system call: interrupt system call, deal with signal, return from system call with indication that something happened&lt;/p&gt;
&lt;p&gt;in general, should only do what’s absolutely necessary inside a signal handler&lt;/p&gt;
&lt;p&gt;cancellation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user pressed Cntrl+C or a request is generated&lt;/li&gt;
&lt;li&gt;not execute the remaining thread, but not the process&lt;/li&gt;
&lt;li&gt;concern cancell it to a consistent state, cleaning up&lt;/li&gt;
&lt;li&gt;pthread_cancel(thread)&lt;/li&gt;
&lt;li&gt;int pthread_setcancelstate ({PTHREAD_CANCEL_DISABLE, PTHREAD_CANCEL_ENABLE}, &amp;amp;oldstate)&lt;/li&gt;
&lt;li&gt;int pthread_setcanceltype ({PTHREAD_CANCEL_ASYNCHRONOUS, PTHREAD_CANCEL_DEFERRED}, &amp;amp;oldtype)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cancellation rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;after calling pthread_cancel(), caller don’t wait for the cancellation, callee marked as a pending cancel&lt;/li&gt;
&lt;li&gt;if callee is cancellation disabled, it stay in pending cancel state&lt;/li&gt;
&lt;li&gt;if callee is enabled and asynchronous, it immediately acts on the cancel&lt;/li&gt;
&lt;li&gt;if callee is enabled but deferred, it delayed until reaches a cancellation point where safe to act on cancel&lt;/li&gt;
&lt;li&gt;pthread_testcancel() can create a cancellation point&lt;/li&gt;
&lt;li&gt;when act on cancel, walk through a stack of cleanup handlers: pthread_cleanup_push(), pthread_cleanup_pop(), the two procedure must match up&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7236/27058898412_5ae7d856a7.jpg&quot; width=&quot;500&quot; height=&quot;306&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Operating System" scheme="http://www.byteants.com/categories/Studying-Notes/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>Memory Management</title>
    <link href="http://www.byteants.com/2016/05/21/memoryreview/"/>
    <id>http://www.byteants.com/2016/05/21/memoryreview/</id>
    <published>2016-05-21T07:00:00.000Z</published>
    <updated>2016-06-01T07:54:54.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This is a review of memory management, and focus on virtual address concept, different ways of memory management, TLB, shadow object, backing store issues.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Virtual-Memory-Basic&quot;&gt;&lt;a href=&quot;#Virtual-Memory-Basic&quot; class=&quot;headerlink&quot; title=&quot;Virtual Memory Basic&quot;&gt;&lt;/a&gt;Virtual Memory Basic&lt;/h2&gt;&lt;h3 id=&quot;Virtual-Address-Concept&quot;&gt;&lt;a href=&quot;#Virtual-Address-Concept&quot; class=&quot;headerlink&quot; title=&quot;Virtual Address Concept&quot;&gt;&lt;/a&gt;Virtual Address Concept&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Protect processes from on another&lt;/li&gt;
&lt;li&gt;Protect the OS from user processes&lt;/li&gt;
&lt;li&gt;Provide efficient management of available storage&lt;/li&gt;
&lt;li&gt;Use a virtual address to address any memory location in the 32-bit address space&lt;/li&gt;
&lt;li&gt;Only headware use physical address(include processor) and OS manages the physical address space&lt;/li&gt;
&lt;li&gt;Memory Management Unit (MMU), is used for indirect address translation. It translated virtual address into physical address.&lt;br&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7534/26980709472_21687456f0_b.jpg&quot; width=&quot;400&quot; height=&quot;200&quot; alt=&quot;MMU&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Memory-Management-in-the-Early-Days&quot;&gt;&lt;a href=&quot;#Memory-Management-in-the-Early-Days&quot; class=&quot;headerlink&quot; title=&quot;Memory Management in the Early Days&quot;&gt;&lt;/a&gt;Memory Management in the Early Days&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Memory Fence&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If a user program tries to access OS area (address bigger than fence address) MMU will generate a trap    &lt;/li&gt;
&lt;li&gt;use overlays and resident to deal with user program won’t fit in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Base and Bounds Registers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bounds register: Address space size of the user process&lt;/li&gt;
&lt;li&gt;Base register: Start of physical memory for the user process&lt;/li&gt;
&lt;li&gt;Segmentation:&lt;ul&gt;
&lt;li&gt;One pair of base and bounds registers per segment.&lt;/li&gt;
&lt;li&gt;code, data, heap, stack and may be more (Memory Mapped file).&lt;/li&gt;
&lt;li&gt;Use one bit to have access control (read-only, read/write).&lt;/li&gt;
&lt;li&gt;If two prcesses read same memory, they can share segments.&lt;/li&gt;
&lt;li&gt;Segmentation fault: virtual address not within range of any base-bounds registers or not valid.&lt;/li&gt;
&lt;li&gt;Copy-On-Write: a process gets private copy of the page after a thread in the process performs a write for the first time (private/share bit need not be inside MMU).&lt;/li&gt;
&lt;li&gt;Use a validity bit for each segment to find whether this segment is in memory or being swapped out before.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Hardware-Support-for-Virtual-Memory&quot;&gt;&lt;a href=&quot;#Hardware-Support-for-Virtual-Memory&quot; class=&quot;headerlink&quot; title=&quot;Hardware Support for Virtual Memory&quot;&gt;&lt;/a&gt;Hardware Support for Virtual Memory&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Segmentation divide the address space into variable-size segments and it has external fragmentation problem and “first-fit” is slow.&lt;/li&gt;
&lt;li&gt;Paging divede the address space into fixed-size pages and can have internal fragmentation problem.&lt;/li&gt;
&lt;li&gt;Paging:&lt;ul&gt;
&lt;li&gt;Address space is divided into pages, indexed by virtual page number.&lt;/li&gt;
&lt;li&gt;Basic (Two-level) Page table indexed by virtual page number, start with a physical address (this is stored in the CR3 register for X86), has validity, modified, reference and protect bit, and physical page number.&lt;/li&gt;
&lt;li&gt;A page table is associated with each process (OS has its page table as well).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Forward-Mapped-Multi-level-Page-Tables&quot;&gt;&lt;a href=&quot;#Forward-Mapped-Multi-level-Page-Tables&quot; class=&quot;headerlink&quot; title=&quot;Forward-Mapped (Multi-level) Page Tables&quot;&gt;&lt;/a&gt;Forward-Mapped (Multi-level) Page Tables&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7400/27076290915_04e7cb14b9_b.jpg&quot; width=&quot;400&quot; height=&quot;220&quot; alt=&quot;FM page table&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use 10 bits for page dir table and 10 bits for page table and the last 12 bits use for offset.&lt;/li&gt;
&lt;li&gt;Can save page table size, the minimum size is 12KB (one page dir two page tables)&lt;/li&gt;
&lt;li&gt;The drawback is it has two physical memory accesses to map a virtual address to a physical address&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Linear-Page-Tables&quot;&gt;&lt;a href=&quot;#Linear-Page-Tables&quot; class=&quot;headerlink&quot; title=&quot;Linear Page Tables&quot;&gt;&lt;/a&gt;Linear Page Tables&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Use 2 bit as Space, 00 and 01 page table are start with virtual address space and conbine the 00 or 01 bits, in 10 space page table started with physical address we can find page table entry.&lt;/li&gt;
&lt;li&gt;Can reduce size requirements with partial page tables, and it can use length register to constranins size of each space. But it not work well for multiple processes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Hashed-Page-Tables&quot;&gt;&lt;a href=&quot;#Hashed-Page-Tables&quot; class=&quot;headerlink&quot; title=&quot;Hashed Page Tables&quot;&gt;&lt;/a&gt;Hashed Page Tables&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Hashed page tables&lt;ul&gt;
&lt;li&gt;Use 2 bits for hashing&lt;/li&gt;
&lt;li&gt;Works well for sparcely allocated address space&lt;/li&gt;
&lt;li&gt;Each page table entry have a tag and link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clustered page tables&lt;ul&gt;
&lt;li&gt;Many page table entries have one tag and link&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Inverted page tables&lt;ul&gt;
&lt;li&gt;Page table is indexed by physical page number&lt;/li&gt;
&lt;li&gt;Conbine virtual page number and PID to get hash&lt;/li&gt;
&lt;li&gt;Each entry contains PID, page number and physical page number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Translation-Lookaside-Buffers-TLB&quot;&gt;&lt;a href=&quot;#Translation-Lookaside-Buffers-TLB&quot; class=&quot;headerlink&quot; title=&quot;Translation Lookaside Buffers (TLB)&quot;&gt;&lt;/a&gt;Translation Lookaside Buffers (TLB)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Cashe page table entries, caches the mapping from virtual page nmber to physical page number.&lt;/li&gt;
&lt;li&gt;TLB miss will cost O(1) memory accesses.&lt;/li&gt;
&lt;li&gt;When a page table entry is modified, the OS must flush (invalidate) the corresponding TLB entry. When switching to a different process, must flush the entire TLB.&lt;/li&gt;
&lt;li&gt;In a multiprocessors environment, one processor can modify a mapping cached in the TLB of another processor by shoot-down (invalidate) the another processor.&lt;/li&gt;
&lt;li&gt;Two-way set-associative cache with 64 lines:    &lt;ul&gt;
&lt;li&gt;Use 6 bits as key to have 64 lines.&lt;/li&gt;
&lt;li&gt;In same the line, tag in the virtual address is used to compared against all other tags in same line simutaneously.&lt;/li&gt;
&lt;li&gt;For other TLB, it can be fully associative cache or one-way set- associative cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;64-Bit-Issues&quot;&gt;&lt;a href=&quot;#64-Bit-Issues&quot; class=&quot;headerlink&quot; title=&quot;64-Bit Issues&quot;&gt;&lt;/a&gt;64-Bit Issues&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Have more tables which need more physical memory accesses to map a virtual address to a physical address&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Virtualization-virtualizing-virtual-memory&quot;&gt;&lt;a href=&quot;#Virtualization-virtualizing-virtual-memory&quot; class=&quot;headerlink&quot; title=&quot;Virtualization (virtualizing virtual memory)&quot;&gt;&lt;/a&gt;Virtualization (virtualizing virtual memory)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Can use shadow page table, when a VM changes its page table, VMM must update the corresponding shadow page table. But it has poor per formance.&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7427/26982039952_1efe21c539_o.png&quot; width=&quot;400&quot; height=&quot;220&quot; alt=&quot;shadow page table&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Extended Page Tables, two table in sequence and does the conversion all by itself.&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7675/26472922783_48b1352333_b.jpg&quot; width=&quot;400&quot; height=&quot;250&quot; alt=&quot;shadow page table&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Operating-System-Issues&quot;&gt;&lt;a href=&quot;#Operating-System-Issues&quot; class=&quot;headerlink&quot; title=&quot;Operating System Issues&quot;&gt;&lt;/a&gt;Operating System Issues&lt;/h2&gt;&lt;h3 id=&quot;General-Concerns&quot;&gt;&lt;a href=&quot;#General-Concerns&quot; class=&quot;headerlink&quot; title=&quot;General Concerns&quot;&gt;&lt;/a&gt;General Concerns&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Prefetching    &lt;ul&gt;
&lt;li&gt;Fetching a page as well as the sequential pages.&lt;/li&gt;
&lt;li&gt;Access to pages is often sequential.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pageout Daemon&lt;ul&gt;
&lt;li&gt;Reference bit in page table entry is used for approximate LRU.&lt;/li&gt;
&lt;li&gt;Clock algorthm, need to give enough time for thousands of references before checking&lt;br&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7366/26982432522_b89cb1fe31_b.jpg&quot; width=&quot;420&quot; height=&quot;280&quot; alt=&quot;Clock algorthm&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Thrashing problem&lt;ul&gt;
&lt;li&gt;Global allocation: All processes compete for page frames from a single pool.&lt;/li&gt;
&lt;li&gt;Local allocation: Each process has its own private pool of page frames. Using Local Allocation is a way to reduce the chance of thrashing.&lt;/li&gt;
&lt;li&gt;For thrashing problem, use Working-Set Principle, if the sum of the working-set of all processes is less than the total amount of available physical memory then thrashing cannot occur.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Representative-Systems&quot;&gt;&lt;a href=&quot;#Representative-Systems&quot; class=&quot;headerlink&quot; title=&quot;Representative Systems&quot;&gt;&lt;/a&gt;Representative Systems&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Address-Space Simplified Representation:    &lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7728/27008966701_abf3d06926_b.jpg&quot; width=&quot;420&quot; height=&quot;250&quot; alt=&quot;AS simple pres&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Address-Space Real Representation:&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7195/27008966741_f2cc810af9_b.jpg&quot; width=&quot;420&quot; height=&quot;270&quot; alt=&quot;AS real pres&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Copy-on-Write-and-Fork&quot;&gt;&lt;a href=&quot;#Copy-on-Write-and-Fork&quot; class=&quot;headerlink&quot; title=&quot;Copy on Write and Fork&quot;&gt;&lt;/a&gt;Copy on Write and Fork&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Shadow Objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep track of pages that were originally copy-on-write but have benn modified.&lt;/li&gt;
&lt;li&gt;A page in a memory map, into which an object was mapped private, have an associated shadow object.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shadow object tells you where to copy from when you need to perform copy-on-write.&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7431/26473555803_b050ed08d4_b.jpg&quot; width=&quot;420&quot; height=&quot;250&quot; alt=&quot;Clock algorthm&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Backing-Store-Issues&quot;&gt;&lt;a href=&quot;#Backing-Store-Issues&quot; class=&quot;headerlink&quot; title=&quot;Backing Store Issues&quot;&gt;&lt;/a&gt;Backing Store Issues&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Shadow objects and anonymous memory must be backed up in swap space.&lt;/li&gt;
&lt;li&gt;Swap Space management approach:    &lt;ul&gt;
&lt;li&gt;randical-conservative approach: eager evaluation, backing-store space is allocated when virtual memory is allocated.&lt;/li&gt;
&lt;li&gt;radical-liberal approach: lazy evaluation, backing-store space is allocated only when needed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This is a review of memory management, and focus on virtual address concept, different ways of memory management, TLB, shadow object, backing store issues.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Operating Systems" scheme="http://www.byteants.com/categories/Studying-Notes/Operating-Systems/"/>
    
    
      <category term="OS" scheme="http://www.byteants.com/tags/OS/"/>
    
      <category term="virtual memory" scheme="http://www.byteants.com/tags/virtual-memory/"/>
    
  </entry>
  
  <entry>
    <title>File Systems</title>
    <link href="http://www.byteants.com/2016/05/21/filesystemsreview/"/>
    <id>http://www.byteants.com/2016/05/21/filesystemsreview/</id>
    <published>2016-05-21T07:00:00.000Z</published>
    <updated>2016-06-01T07:54:59.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;This is a review of file systems, and focus on S5FS, multiple disks, flash memory, crash Resiliency, naming and dirctories.&lt;/li&gt;
&lt;li&gt;The requirements of file systems:&lt;ul&gt;
&lt;li&gt;Permanent storage&lt;/li&gt;
&lt;li&gt;Quick, easy and efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;The-Basics-of-File-Systems&quot;&gt;&lt;a href=&quot;#The-Basics-of-File-Systems&quot; class=&quot;headerlink&quot; title=&quot;The Basics of File Systems&quot;&gt;&lt;/a&gt;The Basics of File Systems&lt;/h3&gt;&lt;h4 id=&quot;Disk-Architecture&quot;&gt;&lt;a href=&quot;#Disk-Architecture&quot; class=&quot;headerlink&quot; title=&quot;Disk Architecture&quot;&gt;&lt;/a&gt;Disk Architecture&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7587/26889680562_7ae35ccfab_h.jpg&quot; width=&quot;400&quot; height=&quot;280&quot; alt=&quot;disk_architecture&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have multiple platters and each one have top and bottom heads.&lt;/li&gt;
&lt;li&gt;The smallest addressable unit is a sector. Each platter contains many tracks and each track contains many sectors. The same vertical’s tracks is one cylinder.&lt;/li&gt;
&lt;li&gt;disk address = (head/surface#, cylinder/track#, sector#)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;S5FS&quot;&gt;&lt;a href=&quot;#S5FS&quot; class=&quot;headerlink&quot; title=&quot;S5FS&quot;&gt;&lt;/a&gt;S5FS&lt;/h4&gt;&lt;p&gt;Simple, slow, don’t terribly tolerant to crashes, reasonably efficient in space although no compression&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;layout&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://farm8.staticflickr.com/7671/26983710105_ec8f5d2828_b.jpg&quot; width=&quot;170&quot; height=&quot;250&quot; alt=&quot;S5FS&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The layout of the disk simply an array of blocks of 1KB each and it starts with Boot block, Superblock and then it contains i-list, which has many blocks and keep all the inode information. The final part is Data Region, which keep all the real data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Superblock&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contains the head of the free list:&lt;br&gt;  Can address up to 100 free disk blocks, and the last pointer point to additional free disk blocks, etc.&lt;/li&gt;
&lt;li&gt;Maintain a free inode list (inode cache):&lt;br&gt;  Caches free inode. When allocate an inode, just remove it from cache and mark in the i-list not free.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I-list&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For each inode, it contains: Device, Inode Number, Mode, Link Count, Owner and Group, Size, Disk Map&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Disk map&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://farm8.staticflickr.com/7031/26950370586_6eea21b2b0_h.jpg&quot; width=&quot;450&quot; height=&quot;320&quot; alt=&quot;Disk map&quot;&gt;&lt;/p&gt;
&lt;p&gt; 0~9 each point to a data block, 10 point to a block which contains 256 max entries and each entry point to a data block, and 11 have one more layer and 12 have two more layer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Improvement-of-S5FS&quot;&gt;&lt;a href=&quot;#Improvement-of-S5FS&quot; class=&quot;headerlink&quot; title=&quot;Improvement of S5FS&quot;&gt;&lt;/a&gt;Improvement of S5FS&lt;/h4&gt;&lt;p&gt;Rhinopias’s S5SF have very low effective transfer speed. We need to improve access time (seek time + rotatinal latency + data transfer time)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Increase block size&lt;/li&gt;
&lt;li&gt;Minimizing seek time&lt;ul&gt;
&lt;li&gt;Use cylinder groups to put related data in the same cylinde group&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Minimizing Latency&lt;ul&gt;
&lt;li&gt;Block interleaving&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Log-Structured File System (LFS)&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7040/26388472283_d457c0580f_b.jpg&quot; width=&quot;400&quot; height=&quot;100&quot; alt=&quot;LFS&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Main principles: nerver delete, append only.&lt;/li&gt;
&lt;li&gt;Inode Map: keep the updated inode, and each inode map piece is appended to log.&lt;/li&gt;
&lt;li&gt;Use checkpoint file (can have previous and current version) which is not belong to log to keeps track of all inode map pieces.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Multiple-Disks&quot;&gt;&lt;a href=&quot;#Multiple-Disks&quot; class=&quot;headerlink&quot; title=&quot;Multiple Disks&quot;&gt;&lt;/a&gt;Multiple Disks&lt;/h3&gt;&lt;h4 id=&quot;Benefits-of-Multiple-Disks&quot;&gt;&lt;a href=&quot;#Benefits-of-Multiple-Disks&quot; class=&quot;headerlink&quot; title=&quot;Benefits of Multiple Disks&quot;&gt;&lt;/a&gt;Benefits of Multiple Disks&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Hold more data&lt;/li&gt;
&lt;li&gt;Can be stored redundantly, increase reliability and availability&lt;/li&gt;
&lt;li&gt;Can spread data, allowing parallel access, increase effective access time&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Logical-Volume-Manager-LVM&quot;&gt;&lt;a href=&quot;#Logical-Volume-Manager-LVM&quot; class=&quot;headerlink&quot; title=&quot;Logical Volume Manager (LVM)&quot;&gt;&lt;/a&gt;Logical Volume Manager (LVM)&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7711/26950370436_e841701895_o.png&quot; width=&quot;350&quot; height=&quot;150&quot; alt=&quot;LVM&quot;&gt;&lt;/p&gt;
&lt;p&gt;Manage multiple disks and try not change existing file systems much.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spanning: Multiple disks appear to file system as one large disk&lt;/li&gt;
&lt;li&gt;Mirroring: Write redundantly to multiple disks. Read from one.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Striping&quot;&gt;&lt;a href=&quot;#Striping&quot; class=&quot;headerlink&quot; title=&quot;Striping&quot;&gt;&lt;/a&gt;Striping&lt;/h4&gt;&lt;p&gt;One disk keep one striping unit data and then the next disk keep next one string unit data and keep doing this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Advantages: Increase parallelism.&lt;/li&gt;
&lt;li&gt;Disadvantages: Worse reliability, higher variance and heterogenious disks will reduce the saving access time.&lt;/li&gt;
&lt;li&gt;In general, performance is better with larger striping unit, which can reduce seek time&lt;/li&gt;
&lt;li&gt;Probability of N-disk system failing is: 1-(1-fail)^N&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Redundant-Array-of-Inexpensive-Disks-RAID&quot;&gt;&lt;a href=&quot;#Redundant-Array-of-Inexpensive-Disks-RAID&quot; class=&quot;headerlink&quot; title=&quot;Redundant Array of Inexpensive Disks (RAID)&quot;&gt;&lt;/a&gt;Redundant Array of Inexpensive Disks (RAID)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;level 1: Just mirroring.&lt;/li&gt;
&lt;li&gt;level 2: Similar to memory’s ECC, use serveal disks to check bits.&lt;/li&gt;
&lt;li&gt;level 3: Use one disk to maintain parity bits.&lt;/li&gt;
&lt;li&gt;level 4: Use one disk to maintain parity blocks.&lt;/li&gt;
&lt;li&gt;level 5: Solve level 4’s problem about write performance bottleneck that has no special disk to maintain parity blocks and spread parity blocks to all disks.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Flash-Memory&quot;&gt;&lt;a href=&quot;#Flash-Memory&quot; class=&quot;headerlink&quot; title=&quot;Flash Memory&quot;&gt;&lt;/a&gt;Flash Memory&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Technologies of Flash&lt;ul&gt;
&lt;li&gt;NOR: Byte addressable.&lt;/li&gt;
&lt;li&gt;NAND: Page addressable, cheaper but has limit on P/E cycle, about 10000.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wear leveling&lt;ul&gt;
&lt;li&gt;Writing problem: To change zeroes to ones, must erase entire block.&lt;/li&gt;
&lt;li&gt;Spread writes/erasures across entire drive.&lt;/li&gt;
&lt;li&gt;Using flash traslation layer(FTL) and log-structured file system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Crash-Resiliency&quot;&gt;&lt;a href=&quot;#Crash-Resiliency&quot; class=&quot;headerlink&quot; title=&quot;Crash Resiliency&quot;&gt;&lt;/a&gt;Crash Resiliency&lt;/h3&gt;&lt;h4 id=&quot;Crash-problem&quot;&gt;&lt;a href=&quot;#Crash-problem&quot; class=&quot;headerlink&quot; title=&quot;Crash problem&quot;&gt;&lt;/a&gt;Crash problem&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Disk update, gather all dirty blocks, which is done one disk block at a time.&lt;/li&gt;
&lt;li&gt;In S5fs and FFS, the lower level file system can sequence disk writes in any order.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;Dealing-with-Crashes&quot;&gt;&lt;a href=&quot;#Dealing-with-Crashes&quot; class=&quot;headerlink&quot; title=&quot;Dealing with Crashes&quot;&gt;&lt;/a&gt;Dealing with Crashes&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Soft Updates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistency-preserving approach: order disk operations to preserve meta-data consistency.&lt;/li&gt;
&lt;li&gt;Have problems. In reality, in order to save the numver of disk writes, multiple objects can be packed into a diks block and will make a cycle in the topological order, and breaking circular dependency will slow the preformance.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Journaling&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://farm8.staticflickr.com/7251/26387400194_a85f1f718a_b.jpg&quot; width=&quot;400&quot; height=&quot;60&quot; alt=&quot;journaling&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use transaction idea, a journal is append-only, and it is a separate part of the disk(can add to any file system).&lt;/li&gt;
&lt;li&gt;Append a commit record, when it’s time to update the file system, write to journal first, and write data to file system only after the commit record is writeen to the journal.&lt;/li&gt;
&lt;li&gt;Undo journaling(record previous contents), redo journaling(record new contents).&lt;/li&gt;
&lt;li&gt;Recovery will take the file system into a consistent state at a transaction boundary, and copying a disk block to the file system is idempotent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shadow paging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Based on copy-on-write ideas&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://farm8.staticflickr.com/7589/26387505004_aabd34527c_b.jpg&quot; width=&quot;400&quot; height=&quot;240&quot; alt=&quot;shadow_paging&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Naming-and-Directories&quot;&gt;&lt;a href=&quot;#Naming-and-Directories&quot; class=&quot;headerlink&quot; title=&quot;Naming and Directories&quot;&gt;&lt;/a&gt;Naming and Directories&lt;/h3&gt;&lt;h4 id=&quot;Directories&quot;&gt;&lt;a href=&quot;#Directories&quot; class=&quot;headerlink&quot; title=&quot;Directories&quot;&gt;&lt;/a&gt;Directories&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;S5FS Directories&lt;ul&gt;
&lt;li&gt;Each entry is 32 bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;FFS Directories:&lt;ul&gt;
&lt;li&gt;No restrictions on names.&lt;/li&gt;
&lt;li&gt;Maintain the last entry to get the free space.&lt;/li&gt;
&lt;li&gt;Use Hash table or B+ tree to look for a file name.&lt;/li&gt;
&lt;li&gt;Use extensible Hashing, the low-order i bits of hi(x) are the same in hi+1(x)&lt;/li&gt;
&lt;li&gt;B+ tree, internal nodes contain no data, just keys, leaf node are linked to ease sorted sequential traversal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Name-Space-Management&quot;&gt;&lt;a href=&quot;#Name-Space-Management&quot; class=&quot;headerlink&quot; title=&quot;Name-Space Management&quot;&gt;&lt;/a&gt;Name-Space Management&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;For Windows, it use drives to make the name-space appear uniform. For Unix, it use file system mounting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;File-systems-Summary&quot;&gt;&lt;a href=&quot;#File-systems-Summary&quot; class=&quot;headerlink&quot; title=&quot;File systems Summary&quot;&gt;&lt;/a&gt;File systems Summary&lt;/h3&gt;&lt;p&gt;This is a review of file systems, and focus on S5FS, multiple disks, flash memory, crash Resiliency, naming and dirctories.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7240/26387779154_5758d2a7f6_b.jpg&quot; width=&quot;450&quot; height=&quot;280&quot; alt=&quot;file_system_summary&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;This is a review of file systems, and focus on S5FS, multiple disks, flash memory, crash Resiliency, naming and dirctories.&lt;/li&gt;
&lt;li&gt;The requirements of file systems:&lt;ul&gt;
&lt;li&gt;Permanent storage&lt;/li&gt;
&lt;li&gt;Quick, easy and efficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Operating Systems" scheme="http://www.byteants.com/categories/Studying-Notes/Operating-Systems/"/>
    
    
      <category term="OS" scheme="http://www.byteants.com/tags/OS/"/>
    
      <category term="file systems" scheme="http://www.byteants.com/tags/file-systems/"/>
    
  </entry>
  
  <entry>
    <title>Introduction, Relational Database and XML</title>
    <link href="http://www.byteants.com/2016/05/20/studying%20notes.database.1/"/>
    <id>http://www.byteants.com/2016/05/20/studying notes.database.1/</id>
    <published>2016-05-20T07:00:00.000Z</published>
    <updated>2016-06-02T04:21:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Introduction-and-Relational-Databases&quot;&gt;&lt;a href=&quot;#Introduction-and-Relational-Databases&quot; class=&quot;headerlink&quot; title=&quot;Introduction and Relational Databases&quot;&gt;&lt;/a&gt;Introduction and Relational Databases&lt;/h2&gt;&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;database management system (DBMS): massive, persistent, safe, multi-user, convenient, efficient, reliable&lt;/p&gt;
&lt;p&gt;database applications may be programmed via “frameworks”; DBMS may run in conjunction with “midleware”; data-intensive applications may not use DBMS at all&lt;/p&gt;
&lt;p&gt;data model: a description of how data is structured. eg: relational data model(a set of records), XML(hierarchical structure, labeled values), graph data model(nodes and edges)&lt;/p&gt;
&lt;p&gt;schema versus data: like types and variables in programming language. schema sets up structure of database&lt;/p&gt;
&lt;p&gt;data definition language(DDL): used to set up a schema&lt;/p&gt;
&lt;p&gt;data manipulation or query language(DML): used to querying and modifying the data&lt;/p&gt;
&lt;p&gt;people about database: DBMS implementer(build system), database designer(establish schema), database application developer(program operate on database), database administrator(loads data, keeps running smoothly)&lt;/p&gt;
&lt;h3 id=&quot;The-Relational-Model&quot;&gt;&lt;a href=&quot;#The-Relational-Model&quot; class=&quot;headerlink&quot; title=&quot;The Relational Model&quot;&gt;&lt;/a&gt;The Relational Model&lt;/h3&gt;&lt;p&gt;database is set of named relations or tables; each table has a set of named attributes or columns; each tuple or row has a value for each attribute; each attribute has a type or domain(integer, domain)&lt;/p&gt;
&lt;p&gt;schema is structural description of relations in database; instance is actual contents at given point in time&lt;/p&gt;
&lt;p&gt;NULL: special value for “unknown” or “undefined”&lt;/p&gt;
&lt;p&gt;key: attribute whose value is unique in each tuple or set of attributes whose combined values are unique&lt;/p&gt;
&lt;p&gt;creating tables in SQL:&lt;br&gt;create table student(ID, name, GPA, photo)&lt;br&gt;create table college(name string, state char(2), enrollment integer)&lt;/p&gt;
&lt;h3 id=&quot;Querying-Relational-Databases&quot;&gt;&lt;a href=&quot;#Querying-Relational-Databases&quot; class=&quot;headerlink&quot; title=&quot;Querying Relational Databases&quot;&gt;&lt;/a&gt;Querying Relational Databases&lt;/h3&gt;&lt;p&gt;steps in creating and using a relational database:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;design schema; create using DDL&lt;/li&gt;
&lt;li&gt;“bulk load” initial data&lt;/li&gt;
&lt;li&gt;repeat: execute queries and modifications&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;queries return tables(compositional, closed)&lt;/p&gt;
&lt;p&gt;query language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;relational algebra(formal)&lt;/li&gt;
&lt;li&gt;SQL(actual/implemented)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;XML-Data&quot;&gt;&lt;a href=&quot;#XML-Data&quot; class=&quot;headerlink&quot; title=&quot;XML Data&quot;&gt;&lt;/a&gt;XML Data&lt;/h2&gt;&lt;h3 id=&quot;Well-formed-XML&quot;&gt;&lt;a href=&quot;#Well-formed-XML&quot; class=&quot;headerlink&quot; title=&quot;Well-formed XML&quot;&gt;&lt;/a&gt;Well-formed XML&lt;/h3&gt;&lt;p&gt;Extensible Markup Language(XML): standard for data representation and exchange; document format similar to HTML(tags describe content instead of formatting); also have streaming format&lt;/p&gt;
&lt;p&gt;basic constructs: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tagged elements(nested): opening tag, text or other sub-elements, closing tag&lt;/li&gt;
&lt;li&gt;attributes: within element’s opening tag; attribute name, the equal sign and attribute value&lt;/li&gt;
&lt;li&gt;text: like leaf element in tree(XML)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;relational model versus XML:&lt;br&gt;|&lt;font size=&quot;1&quot;&gt;  (none) &lt;/font&gt; |&lt;font size=&quot;1&quot;&gt;  Relational  &lt;/font&gt;|&lt;font size=&quot;1&quot;&gt;  XML  &lt;/font&gt;|&lt;br&gt;| :| |&lt;br&gt;|&lt;font size=&quot;1&quot;&gt;  structure &lt;/font&gt; |&lt;font size=&quot;1&quot;&gt;  tables  &lt;/font&gt;|&lt;font size=&quot;1&quot;&gt;  hierarchical tree, graph  &lt;/font&gt;|&lt;br&gt;|&lt;font size=&quot;1&quot;&gt;  schema &lt;/font&gt; |&lt;font size=&quot;1&quot;&gt;  fixed in advance  &lt;/font&gt;|&lt;font size=&quot;1&quot;&gt;  flexible, self-describing  &lt;/font&gt;|&lt;br&gt;|&lt;font size=&quot;1&quot;&gt;  queries &lt;/font&gt; |&lt;font size=&quot;1&quot;&gt;  simple, nice  &lt;/font&gt;|&lt;font size=&quot;1&quot;&gt;  less so  &lt;/font&gt;|&lt;br&gt;|&lt;font size=&quot;1&quot;&gt;  ordering &lt;/font&gt; |&lt;font size=&quot;1&quot;&gt;  none  &lt;/font&gt;|&lt;font size=&quot;1&quot;&gt;  implied  &lt;/font&gt;|&lt;br&gt;|&lt;font size=&quot;1&quot;&gt;  implementation &lt;/font&gt; |&lt;font size=&quot;1&quot;&gt;  native  &lt;/font&gt;|&lt;font size=&quot;1&quot;&gt;  add-on  &lt;/font&gt;|&lt;/p&gt;
&lt;h3 id=&quot;DTDs-IDs-amp-IDREFs&quot;&gt;&lt;a href=&quot;#DTDs-IDs-amp-IDREFs&quot; class=&quot;headerlink&quot; title=&quot;DTDs, IDs &amp;amp; IDREFs&quot;&gt;&lt;/a&gt;DTDs, IDs &amp;amp; IDREFs&lt;/h3&gt;&lt;p&gt;XML adhere to basic structural requirement: single root element; matched tags, proper nesting; unique attributes within elements&lt;/p&gt;
&lt;p&gt;XML also adhere to content-specific specification:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Document Type Descriptor(DTD)&lt;/li&gt;
&lt;li&gt;XML Schema(XSD)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DTD: grammar-like language for specifying elements, attributes, nesting, ordering, #occurrences; also special attribute types ID and IDREFS(specify pointers in document)&lt;/p&gt;
&lt;p&gt;DTD/XSD versus none (well-formed):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+: programs can assume structure; CSS/XSL can assume structure; as a specification language(data exchange); specification for documentation&lt;/li&gt;
&lt;li&gt;-: flexibility, easy to change; DTDs/XSDs can be messy and irregular&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Demo 1 of XML:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Bookstore&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;Book ISBN=&amp;quot;ISBN-0-13-713526-2&amp;quot; Price=&amp;quot;85&amp;quot; Edition=&amp;quot;3rd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Title&amp;gt;A First Course in Database Systems&amp;lt;/Title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Authors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;First_Name&amp;gt;Jeffrey&amp;lt;/First_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;Last_Name&amp;gt;Ullman&amp;lt;/Last_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;/Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;First_Name&amp;gt;Jennifer&amp;lt;/First_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;Last_Name&amp;gt;Widom&amp;lt;/Last_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;/Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/Authors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/Book&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;Book ISBN=&amp;quot;ISBN-0-13-815504-6&amp;quot; Price=&amp;quot;100&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Title&amp;gt;Database Systems: The Complete Book&amp;lt;/Title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Authors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;First_Name&amp;gt;Hector&amp;lt;/First_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;Last_Name&amp;gt;Garcia-Molina&amp;lt;/Last_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;/Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;First_Name&amp;gt;Jeffrey&amp;lt;/First_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;Last_Name&amp;gt;Ullman&amp;lt;/Last_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;/Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;First_Name&amp;gt;Jennifer&amp;lt;/First_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;lt;Last_Name&amp;gt;Widom&amp;lt;/Last_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;/Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/Authors&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Remark&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Buy this book bundled with &amp;quot;A First Course&amp;quot; - a great deal!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/Remark&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/Book&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Bookstore&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;root element is Bookstore, has two Book sub-elements.&lt;br&gt;the first book has an ISBN number, price and editions as attributes.&lt;/p&gt;
&lt;p&gt;Demo 1 of DTD:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE Bookstore [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Bookstore (Book | Magazine)*&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Book (Title, Authors, Remark?)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ATTLIST Book 	ISBN CDATA #REQUIRED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Price CDATA #REQUIRED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Edition CDATA #IMPLIED&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Magazine (Title)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ATTLIST Magazine 	Month CDATA #REQUIRED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						Year CDATA #REQUIRED&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Title (#PCDATA)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Authors (Author+)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Remark (#PCDATA)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Author (First_Name, Last_Name)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT First_Name (#PCDATA)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Last_Name (#PCDATA)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Like regular expression. This DTD named Bookstore and root element called bookstore, having any number of elements that called book or magazine.&lt;br&gt;Book element has a title followed by authors, followed by an optional remark in this order.&lt;br&gt;Book has 3 attributes: ISBN, price, edition. CDATA is type of attribute, same as string. Required means attributes must be present, implied means it doesn’t have to.&lt;br&gt;Title is a leaf consist of string data, so add hash PC data in parentheses in DTD.&lt;/p&gt;
&lt;p&gt;Demo 2 of XML:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Bookstore&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;Book ISBN=&amp;quot;ISBN-0-13-713526-2&amp;quot; Price=&amp;quot;100&amp;quot; Authors=&amp;quot;JU JW&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Title&amp;gt;A First Course in Database Systems&amp;lt;/Title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/Book&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;Book ISBN=&amp;quot;ISBN-0-13-815504-6&amp;quot; Price=&amp;quot;85&amp;quot; Authors=&amp;quot;HG JU JW&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Title&amp;gt;Database Systems: The Complete Book&amp;lt;/Title&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Remark&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Amazon.com says: Buy this book bundled with&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;lt;BookRef book=&amp;quot;ISBN-0-13-713526-2&amp;quot;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- a great deal!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;/Remark&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/Book&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;Author Ident=&amp;quot;HG&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;First_Name&amp;gt;Hector&amp;lt;/First_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Last_Name&amp;gt;Garcia-Molina&amp;lt;/Last_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;Author Ident=&amp;quot;JU&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;First_Name&amp;gt;Jeffrey&amp;lt;/First_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Last_Name&amp;gt;Ullman&amp;lt;/Last_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;Author Ident=&amp;quot;JW&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;First_Name&amp;gt;Jennifer&amp;lt;/First_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;lt;Last_Name&amp;gt;Widom&amp;lt;/Last_Name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/Author&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Bookstore&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Book has ID refs attribute authors and its value can refer to one or more strings that are ID attributes.&lt;br&gt;Author element has ident attribute as ID type.&lt;br&gt;ISBN is an ID attribute for book element and BookRef element has ID refs attribute book.&lt;/p&gt;
&lt;p&gt;Demo 2 of DTD:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE Bookstore [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Bookstore (Book*, Author*)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Book (Title, Remark?)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ATTLIST Book 	ISBN ID #REQUIRED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Price CDATA #REQUIRED&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					Authors IDREFS #REQUIRED&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Title (#PCDATA)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Remark (#PCDATA | BookRef)*&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT BookRef EMPTY&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ATTLIST BookRef book IDREF #REQUIRED&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Author (First_Name, Last_Name)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ATTLIST Author Ident ID #REQUIRED&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT First_Name (#PCDATA)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;!ELEMENT Last_Name (#PCDATA)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Book has a ID attribute ISBN and a IDREFS attribute Authors.&lt;br&gt;Remark consist of the PC data(string) or a book reference and zero more instances of those.&lt;br&gt;BookRef is an empty element and has a IDREF attribute book.&lt;/p&gt;
&lt;h3 id=&quot;XML-Schema&quot;&gt;&lt;a href=&quot;#XML-Schema&quot; class=&quot;headerlink&quot; title=&quot;XML Schema&quot;&gt;&lt;/a&gt;XML Schema&lt;/h3&gt;&lt;p&gt;XSD: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extensive language&lt;/li&gt;
&lt;li&gt;like DTDs, can specify elements, attributes, nesting, ordering, #occurrences&lt;/li&gt;
&lt;li&gt;also data types, keys, (typed)pointers, and more&lt;/li&gt;
&lt;li&gt;written in XML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;demo of XSD:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- XSD for Bookstore-XSD.xml --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;xsd:schema xmlns:xsd=&amp;quot;http://www.w3.org/2001/XMLSchema&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;xsd:element name=&amp;quot;Bookstore&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;xsd:element name=&amp;quot;Book&amp;quot; type=&amp;quot;BookType&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         minOccurs=&amp;quot;0&amp;quot; maxOccurs=&amp;quot;unbounded&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;xsd:element name=&amp;quot;Author&amp;quot; type=&amp;quot;AuthorType&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                         minOccurs=&amp;quot;0&amp;quot; maxOccurs=&amp;quot;unbounded&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;/xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:key name=&amp;quot;BookKey&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:selector xpath=&amp;quot;Book&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:field xpath=&amp;quot;@ISBN&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/xsd:key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:key name=&amp;quot;AuthorKey&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:selector xpath=&amp;quot;Author&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:field xpath=&amp;quot;@Ident&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/xsd:key&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:keyref name=&amp;quot;AuthorKeyRef&amp;quot; refer=&amp;quot;AuthorKey&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:selector xpath=&amp;quot;Book/Authors/Auth&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:field xpath=&amp;quot;@authIdent&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/xsd:keyref&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:keyref name=&amp;quot;BookKeyRef&amp;quot; refer=&amp;quot;BookKey&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:selector xpath=&amp;quot;Book/Remark/BookRef&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:field xpath=&amp;quot;@book&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/xsd:keyref&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;/xsd:element&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;xsd:complexType name=&amp;quot;BookType&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:element name=&amp;quot;Title&amp;quot; type=&amp;quot;xsd:string&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:element name=&amp;quot;Authors&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;lt;xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;xsd:element name=&amp;quot;Auth&amp;quot; maxOccurs=&amp;quot;unbounded&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &amp;lt;xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;xsd:attribute name=&amp;quot;authIdent&amp;quot; type=&amp;quot;xsd:string&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       use=&amp;quot;required&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;/xsd:element&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;lt;/xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;/xsd:element&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:element name=&amp;quot;Remark&amp;quot; minOccurs=&amp;quot;0&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;xsd:complexType mixed=&amp;quot;true&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;lt;xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;xsd:element name=&amp;quot;BookRef&amp;quot; minOccurs=&amp;quot;0&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                               maxOccurs=&amp;quot;unbounded&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &amp;lt;xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;lt;xsd:attribute name=&amp;quot;book&amp;quot; type=&amp;quot;xsd:string&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                       use=&amp;quot;required&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                     &amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                  &amp;lt;/xsd:element&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;               &amp;lt;/xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;/xsd:element&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:attribute name=&amp;quot;ISBN&amp;quot; type=&amp;quot;xsd:string&amp;quot; use=&amp;quot;required&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:attribute name=&amp;quot;Price&amp;quot; type=&amp;quot;xsd:integer&amp;quot; use=&amp;quot;required&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;xsd:complexType name=&amp;quot;AuthorType&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:element name=&amp;quot;First_Name&amp;quot; type=&amp;quot;xsd:string&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;xsd:element name=&amp;quot;Last_Name&amp;quot; type=&amp;quot;xsd:string&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/xsd:sequence&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;xsd:attribute name=&amp;quot;Ident&amp;quot; type=&amp;quot;xsd:string&amp;quot; use=&amp;quot;required&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;/xsd:complexType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/xsd:schema&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;difference from DTD:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typed values: attribute/element have types other than string&lt;/li&gt;
&lt;li&gt;key declarations: similar to ID, have selector and field, not to be globally unique&lt;/li&gt;
&lt;li&gt;references: specific key have specific reference, also have selector and field&lt;/li&gt;
&lt;li&gt;currents constraints: can specify how many times an element type is allowed to occur&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Database" scheme="http://www.byteants.com/categories/Studying-Notes/Database/"/>
    
    
  </entry>
  
  <entry>
    <title>Introduction to Operating System</title>
    <link href="http://www.byteants.com/2016/05/20/studying%20notes.operating%20system.chapter%201/"/>
    <id>http://www.byteants.com/2016/05/20/studying notes.operating system.chapter 1/</id>
    <published>2016-05-20T07:00:00.000Z</published>
    <updated>2016-05-29T02:06:34.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7487/27172188552_99658bfdbd.jpg&quot; width=&quot;500&quot; height=&quot;313&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Operating-System&quot;&gt;&lt;a href=&quot;#Operating-System&quot; class=&quot;headerlink&quot; title=&quot;Operating System&quot;&gt;&lt;/a&gt;Operating System&lt;/h2&gt;&lt;p&gt;Operating Systems Concerns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;performance(time,space,energy)&lt;/li&gt;
&lt;li&gt;sharing and resource management&lt;/li&gt;
&lt;li&gt;failure tolerance&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;li&gt;marketability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hardware:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disks(hard drives,optical drives)&lt;/li&gt;
&lt;li&gt;memory&lt;/li&gt;
&lt;li&gt;processors&lt;/li&gt;
&lt;li&gt;network(ethernet,modem)&lt;/li&gt;
&lt;li&gt;monitor&lt;/li&gt;
&lt;li&gt;keyboard&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mouse&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c2.staticflickr.com/8/7074/26663422633_1f7d9bbd0f.jpg&quot; width=&quot;500&quot; height=&quot;407&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OS Abstractions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disks-&amp;gt;files(file system)&lt;/li&gt;
&lt;li&gt;memory-&amp;gt;programs(processes)&lt;/li&gt;
&lt;li&gt;processors-&amp;gt;threads of control&lt;/li&gt;
&lt;li&gt;network-&amp;gt;communication&lt;/li&gt;
&lt;li&gt;monitor-&amp;gt;windows,graphics&lt;/li&gt;
&lt;li&gt;keyboard-&amp;gt;input&lt;/li&gt;
&lt;li&gt;mouse-&amp;gt;locator&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Issues with files abstraction:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;naming: device-independence&lt;/li&gt;
&lt;li&gt;allocating space on disk(permanent storage): organized for fast access, minimize waste&lt;/li&gt;
&lt;li&gt;shuffling data between disk and memory(high speed temporary storage)&lt;/li&gt;
&lt;li&gt;coping with crashes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;address space(low address at the top):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;text(code) segment: executable code&lt;/li&gt;
&lt;li&gt;data segment: initialized global data&lt;/li&gt;
&lt;li&gt;bss segment: uninitialized global data&lt;/li&gt;
&lt;li&gt;dynamic(heap) segment&lt;/li&gt;
&lt;li&gt;&lt;p&gt;stack segment: local variables, function arguments&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c8.staticflickr.com/8/7318/26663422743_fae4c97a3e.jpg&quot; width=&quot;448&quot; height=&quot;464&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;memory map:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;part hardware, part OS&lt;/li&gt;
&lt;li&gt;&lt;p&gt;each program thinks it has full address space&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c4.staticflickr.com/8/7564/26663422883_5860cbc56b.jpg&quot; width=&quot;500&quot; height=&quot;242&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;A-simple-OS&quot;&gt;&lt;a href=&quot;#A-simple-OS&quot; class=&quot;headerlink&quot; title=&quot;A simple OS&quot;&gt;&lt;/a&gt;A simple OS&lt;/h2&gt;&lt;h3 id=&quot;OS-Structure&quot;&gt;&lt;a href=&quot;#OS-Structure&quot; class=&quot;headerlink&quot; title=&quot;OS Structure&quot;&gt;&lt;/a&gt;OS Structure&lt;/h3&gt;&lt;p&gt;Sixth-Edition Unix OS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;64KB of memory&lt;/li&gt;
&lt;li&gt;single file&lt;/li&gt;
&lt;li&gt;loaded into memory as OS boots&lt;/li&gt;
&lt;li&gt;monolithic OS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Processor modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;user mode: fewest privileges&lt;/li&gt;
&lt;li&gt;privileged mode(part of OS): most privileges&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;kernel: the portion of OS running in privileged mode&lt;/p&gt;
&lt;p&gt;traps:invoking the kernel from user code, always elicit some response&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;some for errors: divide by zero,segmentation fault,bus error&lt;/li&gt;
&lt;li&gt;some not: system calls,page fault&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;interrupts: invoking the kernel from external devices for a response&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;handled independently of any user program(trap is handled as part of the program)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;response to interrupt has no direct effect on currently running program&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c6.staticflickr.com/8/7360/26663422933_22c37f762d.jpg&quot; width=&quot;255&quot; height=&quot;471&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;software interrupt vs hardware interrupt:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s:generated programmatically, h:generated by a device&lt;/li&gt;
&lt;li&gt;handling mechanisms are very similar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;upcall: use signals invoke user program from kernel, executing signal handler&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;terminate the program&lt;/li&gt;
&lt;li&gt;perform corrective action and continue with normal execution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;x86 Processor registers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;idx regs: EIP,ESP,EBP&lt;/li&gt;
&lt;li&gt;seg regs: CS(processor mode),SS&lt;/li&gt;
&lt;li&gt;gen regs: EAX&lt;/li&gt;
&lt;li&gt;other: flags(interrupt enabled)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A0-A31,D0-D31,RD,WR,LOCK,INT&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c1.staticflickr.com/8/7385/26993591040_fe8c908328.jpg&quot; width=&quot;500&quot; height=&quot;320&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Processes-Address-Spaces-amp-Threads&quot;&gt;&lt;a href=&quot;#Processes-Address-Spaces-amp-Threads&quot; class=&quot;headerlink&quot; title=&quot;Processes, Address Spaces, &amp;amp; Threads&quot;&gt;&lt;/a&gt;Processes, Address Spaces, &amp;amp; Threads&lt;/h3&gt;&lt;p&gt;abstraction of program execution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;memory(address space)&lt;/li&gt;
&lt;li&gt;processors&lt;/li&gt;
&lt;li&gt;execution context: the state of a process&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4 system calls for processes: fork(), exec(), wait(), exit()&lt;/p&gt;
&lt;p&gt;turing machine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;infinite tape divided into cells&lt;/li&gt;
&lt;li&gt;head&lt;/li&gt;
&lt;li&gt;state register&lt;/li&gt;
&lt;li&gt;finite table of instructions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;objects is used for any data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;variables&lt;/li&gt;
&lt;li&gt;arrays&lt;/li&gt;
&lt;li&gt;dynamically create objects&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Managing-Processes&quot;&gt;&lt;a href=&quot;#Managing-Processes&quot; class=&quot;headerlink&quot; title=&quot;Managing Processes&quot;&gt;&lt;/a&gt;Managing Processes&lt;/h3&gt;&lt;p&gt;create process: make a copy of a process(fork())&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;parent process: return pid(16 bits) of child from fork&lt;/li&gt;
&lt;li&gt;&lt;p&gt;child process: return 0 from fork&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c4.staticflickr.com/8/7036/27269255515_f5c89c8b8e.jpg&quot; width=&quot;480&quot; height=&quot;500&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;process control block(PCB): kernel data structure&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pid&lt;/li&gt;
&lt;li&gt;address space description&lt;/li&gt;
&lt;li&gt;terminated children: points to linkedlist of dead child’s PCB&lt;/li&gt;
&lt;li&gt;link: the process itself as a list node in a linkedlist&lt;/li&gt;
&lt;li&gt;return code: 8-bit long, communicate with parent process&lt;/li&gt;
&lt;li&gt;current state&lt;/li&gt;
&lt;li&gt;&lt;p&gt;handles(open file descriptors): refer to an object managed by kernel&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c4.staticflickr.com/8/7178/27269255955_58f737c1e2.jpg&quot; width=&quot;500&quot; height=&quot;229&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;thread control block(TCB): &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stack pointer&lt;/li&gt;
&lt;li&gt;other registers&lt;/li&gt;
&lt;li&gt;state&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((pid=fork())==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*copy least significant 8-bit of n into PCB*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ReturnCode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(pid!=wait(&amp;amp;ReturnCode));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*wait() is a blocking call, reaps dead child process*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(ReturnCode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;/*return to start up function, calling exit(ReturnCode)*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;when exit(), OS free up everything except PCB, go into a zombie state; after wait(), pid be reused and PCB be freed up&lt;/p&gt;
&lt;p&gt;if parent call exit() while child in zombie state: init process inherits all zombie children, keep calling wait()&lt;/p&gt;
&lt;h3 id=&quot;Loading-Program-Into-Processes&quot;&gt;&lt;a href=&quot;#Loading-Program-Into-Processes&quot; class=&quot;headerlink&quot; title=&quot;Loading Program Into Processes&quot;&gt;&lt;/a&gt;Loading Program Into Processes&lt;/h3&gt;&lt;p&gt;run a program:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make a copy of a process: fork()&lt;/li&gt;
&lt;li&gt;&lt;p&gt;replace child process with a new one(some stuff survives): exec()&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c2.staticflickr.com/8/7491/27269256145_0afb6517a2.jpg&quot; width=&quot;500&quot; height=&quot;353&quot;&gt;&lt;br&gt;  &lt;img src=&quot;https://c2.staticflickr.com/8/7157/27269256225_7167a4d314.jpg&quot; width=&quot;457&quot; height=&quot;480&quot;&gt;&lt;br&gt;  &lt;img src=&quot;https://c7.staticflickr.com/8/7616/26993592190_4fba5a9ee0.jpg&quot; width=&quot;451&quot; height=&quot;466&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;address space composed of user portion and kernel portion, the same kernel for system calls spans across all user process&lt;br&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7441/26993592290_ff43cba0b1.jpg&quot; width=&quot;372&quot; height=&quot;338&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Files&quot;&gt;&lt;a href=&quot;#Files&quot; class=&quot;headerlink&quot; title=&quot;Files&quot;&gt;&lt;/a&gt;Files&lt;/h3&gt;&lt;p&gt;files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fetching and storing data outside a process&lt;/li&gt;
&lt;li&gt;hierarchical naming structure&lt;/li&gt;
&lt;li&gt;part of a process’s extended address space&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;directory system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shared by all processes running on a computer: each process have different view and root&lt;/li&gt;
&lt;li&gt;name space(handle) is outside the process:&lt;ul&gt;
&lt;li&gt;user process provide file name to OS&lt;/li&gt;
&lt;li&gt;OS return handle to access file along the entire path&lt;/li&gt;
&lt;li&gt;user process use handle to read/write file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;file abstraction:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array of bytes&lt;/li&gt;
&lt;li&gt;be made larger by writing beyond current end&lt;/li&gt;
&lt;li&gt;named by path&lt;/li&gt;
&lt;li&gt;system calls on files are synchronous&lt;/li&gt;
&lt;li&gt;API: open(), read(), write(), close()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;standard file descriptors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 is stdin, default map to keyboard&lt;/li&gt;
&lt;li&gt;1 is stdout, default map to display&lt;/li&gt;
&lt;li&gt;2 is stderr, default map to display&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;whenever a process request a new file descriptor, the lowest numbered file descriptor not already associated with an open file is selected&lt;/p&gt;
&lt;p&gt;I/O redirection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&gt; in shell command redirect the output to given file&lt;/li&gt;
&lt;li&gt;&amp;lt; in shell command redirect the input from given file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;file descriptor table(maintained by OS, in PCB, per process):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;file descriptor(handle, an index into an array) refer to its entry, 32 entries&lt;/li&gt;
&lt;li&gt;its entry points to system file table(system wide)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;system file table(maintained by OS):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reference count&lt;/li&gt;
&lt;li&gt;access mode&lt;/li&gt;
&lt;li&gt;file location: cursor&lt;/li&gt;
&lt;li&gt;inode pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;inode table: inode form boundary between VFS and actual file system&lt;br&gt;&lt;img src=&quot;https://c4.staticflickr.com/8/7418/27269256355_41c23bf0a7.jpg&quot; width=&quot;500&quot; height=&quot;277&quot;&gt;&lt;/p&gt;
&lt;p&gt;inter-process communication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if open file twice, two fd point to two extended address space, both point to the file, change second fd will influence first fd&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c8.staticflickr.com/8/7059/26663423983_7d9011584f.jpg&quot; width=&quot;500&quot; height=&quot;142&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use dup() system call to share context information, ref of extended address space change to 2&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c6.staticflickr.com/8/7296/26663424013_773d79a21d.jpg&quot; width=&quot;500&quot; height=&quot;133&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;when fork(), child and parent process get separate file descriptor table but share extended address space&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c2.staticflickr.com/8/7436/26663424073_fd811defae.jpg&quot; width=&quot;500&quot; height=&quot;249&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pipe():system call, create a pipe object in kernel, return two file descriptors refer to pipe. one for read, one for write&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c6.staticflickr.com/8/7668/26663424133_ec2725618f.jpg&quot; width=&quot;500&quot; height=&quot;304&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; p[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pipe(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fork()==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	close(p[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(read(p[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;],buf,&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;)&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	close(p[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		write(p[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;],buf,&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;off_t lseek(int fd, off_t offset, int whence): move cursor position, whence could be SEEK_SET/SEEK_CUR/SEEK_END&lt;/p&gt;
&lt;p&gt;file is represented as an inode in file system, directory is a kind of file, containing reference to other file/directories. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Directory map file name to inode number&lt;/li&gt;
&lt;li&gt;&lt;p&gt;inode map inode number to sector on disk, done in actual file system&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c6.staticflickr.com/8/7460/26663422533_947f2b2869.jpg&quot; width=&quot;482&quot; height=&quot;416&quot;&gt;&lt;br&gt;  &lt;img src=&quot;https://c7.staticflickr.com/8/7127/26993590190_19e18babb6.jpg&quot; width=&quot;287&quot; height=&quot;251&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;directory hierarchy deviation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;hard link: reference to a file(not directory) in one directory also appear in another&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c5.staticflickr.com/8/7540/26993590140_f180185547.jpg&quot; width=&quot;500&quot; height=&quot;306&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;soft link(symbolic link): a special kind of file containing the name of another file or directory&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;https://c1.staticflickr.com/8/7403/26993589920_5b492a8b69.jpg&quot; width=&quot;500&quot; height=&quot;315&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;working directory: in kernel for each process, paths not starting from “/“ start with the working directory&lt;/p&gt;
&lt;p&gt;access protection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;security principals:&lt;ul&gt;
&lt;li&gt;user: owner of file&lt;/li&gt;
&lt;li&gt;group: group owner of file&lt;/li&gt;
&lt;li&gt;others: everyone else&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;operations:&lt;ul&gt;
&lt;li&gt;read: read a file or directory&lt;/li&gt;
&lt;li&gt;write: write a file or directory&lt;/li&gt;
&lt;li&gt;execute: have execute permission for a directory in order to follow a path through it&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rules for checking permission:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;determine smallest class of principlas the requester belongs to&lt;/li&gt;
&lt;li&gt;&lt;p&gt;check for appropriate permissions with that class&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c3.staticflickr.com/8/7255/27172188722_af21bc0eb5.jpg&quot; width=&quot;500&quot; height=&quot;226&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;setting file permission:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int chmod(const char *path, mode_t mode):&lt;ul&gt;
&lt;li&gt;only owner of file and superuser may change permission&lt;/li&gt;
&lt;li&gt;have 9 possibilities for mode: S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;permission=mode&amp;amp;~umask, umask used to turn off undesired permission&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://c1.staticflickr.com/8/7487/27172188552_99658bfdbd.jpg&quot; width=&quot;500&quot; height=&quot;313&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Studying Notes" scheme="http://www.byteants.com/categories/Studying-Notes/"/>
    
      <category term="Operating System" scheme="http://www.byteants.com/categories/Studying-Notes/Operating-System/"/>
    
    
  </entry>
  
  <entry>
    <title>Burrows Wheeler</title>
    <link href="http://www.byteants.com/2016/05/14/BurrowsWheeler/"/>
    <id>http://www.byteants.com/2016/05/14/BurrowsWheeler/</id>
    <published>2016-05-14T07:00:00.000Z</published>
    <updated>2016-05-15T22:15:12.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7209/26412654054_a350ac4de8.jpg&quot; width=&quot;486&quot; height=&quot;362&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;The Burrows–Wheeler transform rearranges a character string into runs of similar characters. The transform is done by sorting all rotations of the text into lexicographic order, by which we mean that the 8 rotations appear in the second column in a different order, in that the 8 rows have been sorted into lexicographical order. We then take as output the last column and the number k = 7 of the row that the non rotated row ends up in. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Burrows–Wheeler_transform&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;Burrows Wheeler is useful for compression, since it tends to be easy to compress a string that has runs of repeated characters by techniques such as move-to-front transform and run-length encoding. More importantly, the transformation is reversible, without needing to store any additional data. The BWT is thus a “free” method of improving the efficiency of text compression algorithms, costing only some extra computation.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Run-Length-Encoding&quot;&gt;&lt;a href=&quot;#Run-Length-Encoding&quot; class=&quot;headerlink&quot; title=&quot;Run-Length Encoding&quot;&gt;&lt;/a&gt;Run-Length Encoding&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;Run-length encoding (RLE) is a very simple form of lossless data compression in which runs of data (that is, sequences in which the same data value occurs in many consecutive data elements) are stored as a single data value and count, rather than as the original run. This is most useful on data that contains many such runs. Consider, for example, simple graphic images such as icons, line drawings, and animations. It is not useful with files that don’t have many runs as it could greatly increase the file size. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Run-length_encoding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;h3 id=&quot;Huffman-Compression&quot;&gt;&lt;a href=&quot;#Huffman-Compression&quot; class=&quot;headerlink&quot; title=&quot;Huffman Compression&quot;&gt;&lt;/a&gt;Huffman Compression&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;In computer science and information theory, a Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression. The output from Huffman’s algorithm can be viewed as a variable-length code table for encoding a source symbol (such as a character in a file). The algorithm derives this table from the estimated probability or frequency of occurrence (weight) for each possible value of the source symbol. As in other entropy encoding methods, more common symbols are generally represented using fewer bits than less common symbols. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Huffman_coding&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;h3 id=&quot;LZW-Compression&quot;&gt;&lt;a href=&quot;#LZW-Compression&quot; class=&quot;headerlink&quot; title=&quot;LZW Compression&quot;&gt;&lt;/a&gt;LZW Compression&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;LZW compression is the compression of a file into a smaller file. A particular LZW compression algorithm takes each input sequence of bits of a given length (for example, 12 bits) and creates an entry in a table (sometimes called a “dictionary” or “codebook”) for that particular bit pattern, consisting of the pattern itself and a shorter code. As input is read, any pattern that has been read before results in the substitution of the shorter code, effectively compressing the total amount of input to something smaller. - &lt;a href=&quot;http://whatis.techtarget.com/definition/LZW-compression&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;WhatIs&lt;/a&gt;&lt;/font&gt;


&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  year &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  scheme  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  bits/char  &lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1967 &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  ASCII  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  7.00  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1950 &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  Huffman  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  4.70  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1977 &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  LZ77  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  3.94  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1984 &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  LZMW  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  3.32  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1987 &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  LZH  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  3.30  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1987 &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  move-to-front  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  3.24  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1995 &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  Burrows-Wheeler  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  2.29  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;font size=&quot;1&quot;&gt;&lt;strong&gt;lossless data compression benchmarks&lt;/strong&gt;&lt;/font&gt;


&lt;hr&gt;
&lt;h3 id=&quot;Project&quot;&gt;&lt;a href=&quot;#Project&quot; class=&quot;headerlink&quot; title=&quot;Project&quot;&gt;&lt;/a&gt;Project&lt;/h3&gt;&lt;p&gt;For this project, we at first create a class named Circular suffix array, which describes the abstraction of a sorted array of the N circular suffixs of a string of length N and we can get the index of each sorted suffixes. Then we implement Burrows-Wheeler transform with the help of Circular suffix array, getting the row number first to indicate the start position and transform the file by recording the last column in the sorted suffixes array. Finally we use the Move-to-front encoding to move a character to the front of the sequence every time we read a character from the input message.&lt;/p&gt;
&lt;p&gt;The goal of this project is to implement 3 class:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MoveToFront&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// apply move-to-front encoding, reading from standard input and writing to standard output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// apply move-to-front decoding, reading from standard input and writing to standard output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// if args[0] is &#39;-&#39;, apply move-to-front encoding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// if args[0] is &#39;+&#39;, apply move-to-front decoding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; class CircularSuffixArray &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CircularSuffixArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String s)&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// circular suffix array of s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;                   &lt;span class=&quot;comment&quot;&gt;// length of s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i)&lt;/span&gt;               &lt;span class=&quot;comment&quot;&gt;// returns index of ith sorted suffix&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;// unit testing of the methods (optional)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; class BurrowsWheeler &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// apply Burrows-Wheeler encoding, reading from standard input and writing to standard output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// apply Burrows-Wheeler decoding, reading from standard input and writing to standard output&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// if args[0] is &#39;-&#39;, apply Burrows-Wheeler encoding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// if args[0] is &#39;+&#39;, apply Burrows-Wheeler decoding&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For the MoveToFront class, we use a linkedlist to store the sequence. And when encoding the input message, we should use a iterator to find the matched character in the linkedlist.&lt;/li&gt;
&lt;li&gt;For the CircularSuffixArray class, we create a index array to indicate the start position of each sorted suffix in the input string, and implementing the Comparator class to compare two sorted suffixes.&lt;/li&gt;
&lt;li&gt;For the BurrowsWheeler’s decoding, we use a hashmap with the key of character and value of queue, storing every index of such character in the input message.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/burrows.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;project detail discription&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xiaofeixiawang/algorithms/tree/master/princeton_hw10/src&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7209/26412654054_a350ac4de8.jpg&quot; width=&quot;486&quot; height=&quot;362&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=2&gt;The Burrows–Wheeler transform rearranges a character string into runs of similar characters. The transform is done by sorting all rotations of the text into lexicographic order, by which we mean that the 8 rotations appear in the second column in a different order, in that the 8 rows have been sorted into lexicographical order. We then take as output the last column and the number k = 7 of the row that the non rotated row ends up in. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Burrows–Wheeler_transform&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;Burrows Wheeler is useful for compression, since it tends to be easy to compress a string that has runs of repeated characters by techniques such as move-to-front transform and run-length encoding. More importantly, the transformation is reversible, without needing to store any additional data. The BWT is thus a “free” method of improving the efficiency of text compression algorithms, costing only some extra computation.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.byteants.com/categories/Project/"/>
    
      <category term="Princeton Algorithms" scheme="http://www.byteants.com/categories/Project/Princeton-Algorithms/"/>
    
    
      <category term="Compression" scheme="http://www.byteants.com/tags/Compression/"/>
    
      <category term="Decompression" scheme="http://www.byteants.com/tags/Decompression/"/>
    
  </entry>
  
  <entry>
    <title>Boggle</title>
    <link href="http://www.byteants.com/2016/05/11/Boggle/"/>
    <id>http://www.byteants.com/2016/05/11/Boggle/</id>
    <published>2016-05-11T07:00:00.000Z</published>
    <updated>2016-05-11T22:33:57.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7782/26923218076_6fbd8b3afe.jpg&quot; width=&quot;460&quot; height=&quot;215&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;Boggle is a world game, which could be solved by Trie data structure. In computer science, a trie, also called digital tree and sometimes radix tree or prefix tree (as they can be searched by prefixes), is an ordered tree data structure that is used to store a dynamic set or associative array where the keys are usually strings. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;A common application of a trie is storing a predictive text or autocomplete dictionary, such as found on a mobile telephone. Such applications take advantage of a trie’s ability to quickly search for, insert, and delete entries.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;R-way-Tries&quot;&gt;&lt;a href=&quot;#R-way-Tries&quot; class=&quot;headerlink&quot; title=&quot;R-way Tries&quot;&gt;&lt;/a&gt;R-way Tries&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;There are several ways to represent tries, corresponding to different trade-offs between memory use and speed of the operations. The basic form is that of a linked set of nodes, where each node contains an array of child pointers, one for each symbol in the alphabet (so for the English alphabet, one would store 26 child pointers and for the alphabet of bytes, 256 pointers). - &lt;a href=&quot;https://en.wikipedia.org/wiki/Trie#Implementation_strategies&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;h3 id=&quot;Ternary-Search-Tries&quot;&gt;&lt;a href=&quot;#Ternary-Search-Tries&quot; class=&quot;headerlink&quot; title=&quot;Ternary Search Tries&quot;&gt;&lt;/a&gt;Ternary Search Tries&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;In computer science, Each node of a ternary search tree stores a single character, an object (or a pointer to an object depending on implementation), and pointers to its three children conventionally named equal kid, lo kid and hi kid, which can also be referred respectively as middle (child), lower (child) and higher (child). - &lt;a href=&quot;https://en.wikipedia.org/wiki/Ternary_search_tree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;


&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  implementation &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  search hit  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  search miss  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  insert  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  space  &lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  red-black BST &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  L+clg^2(N)  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  clg^2(N)  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  clg^2(N)  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  4N  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  hashing(linear probing) &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  L  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  L  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  L  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  4N to 16N  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  R-way trie &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  L  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  logN  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  L  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  (R+1)N  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  TST &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  L+lnN  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  lnN  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  L+lnN  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  4N  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;font size=&quot;1&quot;&gt;&lt;strong&gt;different implementation about symbol-table&lt;/strong&gt;&lt;/font&gt;


&lt;hr&gt;
&lt;h3 id=&quot;Project&quot;&gt;&lt;a href=&quot;#Project&quot; class=&quot;headerlink&quot; title=&quot;Project&quot;&gt;&lt;/a&gt;Project&lt;/h3&gt;&lt;p&gt;For this project, we use a trie tree to store the dictionary, and use dfs algorithm to get every kind of sequence of characters from Boggle board and check their validity by trie tree.&lt;/p&gt;
&lt;p&gt;The goal of this project is to implement 1 class:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BoggleSolver&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Initializes the data structure using the given array of strings as the dictionary.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// (You can assume each word in the dictionary contains only the uppercase letters A through Z.)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BoggleSolver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] dictionary)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Returns the set of all valid words in the given Boggle board, as an Iterable.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Iterable&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;getAllValidWords&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(BoggleBoard board)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Returns the score of the given word if it is in the dictionary, zero otherwise.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// (You can assume the word contains only the uppercase letters A through Z.)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;scoreOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For the Trie tree, we store a corresponding string as a value for a ending character, so that we can get the string easily without tracking the characters from the start.&lt;/li&gt;
&lt;li&gt;A built in TrieST data structure is already provide for us, but we can only check for a word start from root, which is inefficient for our problem. We should emulate the TrieST(get and put function) by implement by ourselves, so that at every point in the board, we check if it has a corresponding value.&lt;/li&gt;
&lt;li&gt;Every time we get a ‘Q’ from board, we should use get function to match both ‘Q’ and ‘U’ in the trie tree.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/boggle.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;project detail discription&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xiaofeixiawang/algorithms/blob/master/princeton_hw9/src&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://farm8.staticflickr.com/7782/26923218076_6fbd8b3afe.jpg&quot; width=&quot;460&quot; height=&quot;215&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=2&gt;Boggle is a world game, which could be solved by Trie data structure. In computer science, a trie, also called digital tree and sometimes radix tree or prefix tree (as they can be searched by prefixes), is an ordered tree data structure that is used to store a dynamic set or associative array where the keys are usually strings. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Trie&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;A common application of a trie is storing a predictive text or autocomplete dictionary, such as found on a mobile telephone. Such applications take advantage of a trie’s ability to quickly search for, insert, and delete entries.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.byteants.com/categories/Project/"/>
    
      <category term="Princeton Algorithms" scheme="http://www.byteants.com/categories/Project/Princeton-Algorithms/"/>
    
    
      <category term="TrieTree" scheme="http://www.byteants.com/tags/TrieTree/"/>
    
      <category term="Depth-First Search" scheme="http://www.byteants.com/tags/Depth-First-Search/"/>
    
  </entry>
  
  <entry>
    <title>Baseball Elimination</title>
    <link href="http://www.byteants.com/2016/04/11/BaseballElimination/"/>
    <id>http://www.byteants.com/2016/04/11/BaseballElimination/</id>
    <published>2016-04-11T07:00:00.000Z</published>
    <updated>2016-04-12T02:10:49.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1586/26379159155_9fbb11ef23_z.jpg&quot; width=&quot;589&quot; height=&quot;301&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;In optimization theory, maximum flow problems involve finding a feasible flow through a single-source, single-sink flow network that is maximum. The maximum flow problem can be seen as a special case of more complex network flow problems, such as the circulation problem. The maximum value of an s-t flow is equal to the minimum capacity of an s-t cut in the network, as stated in the max-flow min-cut theorem. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_flow_problem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;maximum flow problems have many practical applications, baseball elimination is one of them. There is a division consisting of N teams. At some point during the season, team i has w[i] wins, l[i] losses, r[i] remaining games, and g[i][j] games left to play against team j. A team is mathematically eliminated if it cannot possibly finish the season in (or tied for) first place. The goal is to determine exactly which teams are mathematically eliminated.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Max-flow-Min-cur-theorem&quot;&gt;&lt;a href=&quot;#Max-flow-Min-cur-theorem&quot; class=&quot;headerlink&quot; title=&quot;Max-flow Min-cur theorem&quot;&gt;&lt;/a&gt;Max-flow Min-cur theorem&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;In optimization theory, the max-flow min-cut theorem states that in a flow network, the maximum amount of flow passing from the source to the sink is equal to the minimum capacity that, when removed in a specific way from the network, causes the situation that no flow can pass from the source to the sink. The max-flow min-cut theorem is a special case of the duality theorem for linear programs and can be used to derive Menger’s theorem and the König–Egerváry theorem. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Max-flow_min-cut_theorem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;


&lt;/blockquote&gt;
&lt;h3 id=&quot;Ford-Fulkerson-algorithm&quot;&gt;&lt;a href=&quot;#Ford-Fulkerson-algorithm&quot; class=&quot;headerlink&quot; title=&quot;Ford-Fulkerson algorithm&quot;&gt;&lt;/a&gt;Ford-Fulkerson algorithm&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;The Ford–Fulkerson method or Ford–Fulkerson algorithm (FFA) is an algorithm that computes the maximum flow in a flow network. It is called a “method” instead of an “algorithm” as the approach to finding augmenting paths in a residual graph is not fully specified or it is specified in several implementations with different running times. The idea behind the algorithm is as follows: as long as there is a path from the source (start node) to the sink (end node), with available capacity on all edges in the path, we send flow along one of the paths. Then we find another path, and so on. A path with available capacity is called an augmenting path. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Ford–Fulkerson_algorithm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;


&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  augmenting &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  number of paths  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  implementation  &lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  shortest path &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1/2EV  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  queue(BFS)  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  fattest path &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  Eln(EU)  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  priority queue  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  random path &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  EU  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  randomized queue  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  DFS path &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  EU  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  stack(DFS)  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;font size=&quot;1&quot;&gt;&lt;strong&gt;different implementation about augmentation path&lt;/strong&gt;&lt;/font&gt;


&lt;hr&gt;
&lt;h3 id=&quot;Project&quot;&gt;&lt;a href=&quot;#Project&quot; class=&quot;headerlink&quot; title=&quot;Project&quot;&gt;&lt;/a&gt;Project&lt;/h3&gt;&lt;p&gt;For this project, we use several integer arrays to store teams and each team’s winning, losing and remaining games. Then we use FlowNetwork class to create a flow network based on teams and winning, remaining games, and use FordFulkerson class to calculate max flow and min cut. Finally based on the status of flow network, we can make a team elimination.&lt;/p&gt;
&lt;p&gt;The goal of this project is to implement 1 class:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseballElimination&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BaseballElimination&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String filename)&lt;/span&gt;                    &lt;span class=&quot;comment&quot;&gt;// create a baseball division from given filename in format specified below&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;              &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numberOfTeams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;                        &lt;span class=&quot;comment&quot;&gt;// number of teams&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Iterable&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;teams&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;                                &lt;span class=&quot;comment&quot;&gt;// all teams&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;              &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;wins&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String team)&lt;/span&gt;                      &lt;span class=&quot;comment&quot;&gt;// number of wins for given team&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;              &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;losses&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String team)&lt;/span&gt;                    &lt;span class=&quot;comment&quot;&gt;// number of losses for given team&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;              &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;remaining&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String team)&lt;/span&gt;                 &lt;span class=&quot;comment&quot;&gt;// number of remaining games for given team&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;              &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;against&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String team1, String team2)&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;// number of remaining games between team1 and team2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;          &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isEliminated&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String team)&lt;/span&gt;              &lt;span class=&quot;comment&quot;&gt;// is given team eliminated?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Iterable&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;certificateOfElimination&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String team)&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// subset R of teams that eliminates given team; null if not eliminated&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In order to match a index in winning/remainging array with a specific team, we use a hashmap to store team/id pairs. So that when giving a string of a team, we could quickly find the corresponding status.&lt;/li&gt;
&lt;li&gt;Every time operating isEliminated or certificateOfElimination function, we at first check if the given team could be trivially eliminated. if not, creating a related flow network and use Ford-Fulkerson class to check if the given team could be eliminated.&lt;/li&gt;
&lt;li&gt;We could create a Graph node to store FlowNetwork and FordFulkerson together. And when initializing flow network, we use nested for loop to try every valid matched teams and add three corresponding edges and update current index(number of nodes in network).&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/baseball.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;project detail discription&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xiaofeixiawang/algorithms/tree/master/princeton_hw8/src&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1586/26379159155_9fbb11ef23_z.jpg&quot; width=&quot;589&quot; height=&quot;301&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=2&gt;In optimization theory, maximum flow problems involve finding a feasible flow through a single-source, single-sink flow network that is maximum. The maximum flow problem can be seen as a special case of more complex network flow problems, such as the circulation problem. The maximum value of an s-t flow is equal to the minimum capacity of an s-t cut in the network, as stated in the max-flow min-cut theorem. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Maximum_flow_problem&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;maximum flow problems have many practical applications, baseball elimination is one of them. There is a division consisting of N teams. At some point during the season, team i has w[i] wins, l[i] losses, r[i] remaining games, and g[i][j] games left to play against team j. A team is mathematically eliminated if it cannot possibly finish the season in (or tied for) first place. The goal is to determine exactly which teams are mathematically eliminated.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.byteants.com/categories/Project/"/>
    
      <category term="Princeton Algorithms" scheme="http://www.byteants.com/categories/Project/Princeton-Algorithms/"/>
    
    
      <category term="Graph" scheme="http://www.byteants.com/tags/Graph/"/>
    
      <category term="Maxflow" scheme="http://www.byteants.com/tags/Maxflow/"/>
    
      <category term="Ford-Fulkerson" scheme="http://www.byteants.com/tags/Ford-Fulkerson/"/>
    
  </entry>
  
  <entry>
    <title>Stock Search App -- AutoComplete</title>
    <link href="http://www.byteants.com/2016/04/11/Stock%20Search%20APP%20--%20AutoComplete/"/>
    <id>http://www.byteants.com/2016/04/11/Stock Search APP -- AutoComplete/</id>
    <published>2016-04-11T07:00:00.000Z</published>
    <updated>2016-05-25T16:18:48.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1693/26393556095_c31c115dc0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;During developing the Stock Search App on the cloud server (AWS), in order to make out application be used conveniently the input will autocomplete based on the users’ input. This function can be divided into two parts, the back-end and front-end. Firstly, with the help of Ajax, the input of user will send to the server and server will fetch the information for user synchronously. This process is hidden to users. Secondly, when the front end get the data from the server, jQuery UI will show these data as a prompting list so that user can choose what they want to search. During the process, the user haven’t to press any button and the prompting message will change as the change of users’ inputs. Users can’t feel the process of data transmission between local and server. It is just like they run an application locally which is a great benefit of Ajax.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;jQuery-UI-realize-the-autocomplete-front-end&quot;&gt;&lt;a href=&quot;#jQuery-UI-realize-the-autocomplete-front-end&quot; class=&quot;headerlink&quot; title=&quot;jQuery UI realize the autocomplete front-end&quot;&gt;&lt;/a&gt;jQuery UI realize the autocomplete front-end&lt;/h3&gt;&lt;p&gt;Fortunately, jQuery provide a user interface to realize the autocomplete prompting list. In the &lt;a href=&quot;http://jqueryui.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;official website&lt;/a&gt;, it provides some &lt;a href=&quot;https://jqueryui.com/autocomplete/#default&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;examples&lt;/a&gt;. At the same time, we need to add following libraries, including CSS and javascript, to our application.&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//code.jquery.com/jquery-1.10.2.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;//code.jquery.com/ui/1.11.4/jquery-ui.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Firstly, we build an array in our application. We can get the input element based on the input textbox’s ID. When we add the jQuery-UI library, the input textbox will have the autocomplete method. In the method there is a source variable, and then we can set the source as the array what we just create before. Then the input will autocomplete based on the users’ input and the array we create. For example, when the user type j in the textbox, the autocomplete function will search the string star with ‘j’ from the array. When it get a list, then it will show this list for us.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  $(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; availableTags = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;ActionScript&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;AppleScript&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Asp&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;BASIC&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;C++&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Clojure&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;COBOL&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;ColdFusion&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Erlang&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Fortran&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Groovy&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Haskell&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Java&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Lisp&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Perl&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;PHP&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Python&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Ruby&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Scala&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;Scheme&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&quot;#tags&quot;&lt;/span&gt; ).autocomplete(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      source: availableTags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The code above is sample and clean and it satisfy our need of front end. However, it just can autocomplete the user’s input based on the array which we create before. Actually, it is impossible for us to create an array to autocomplete user’s input during our application. The amount of company is so large, so we need to fetch the useful data from the stock server instead create a static array in our application. In the following section, I will talks about how we can get information from the server.&lt;/p&gt;
&lt;h3 id=&quot;Autocomplete-Based-on-Users’-Input&quot;&gt;&lt;a href=&quot;#Autocomplete-Based-on-Users’-Input&quot; class=&quot;headerlink&quot; title=&quot;Autocomplete Based on Users’ Input&quot;&gt;&lt;/a&gt;Autocomplete Based on Users’ Input&lt;/h3&gt;&lt;p&gt;In our application, what we face is a huge amount of data so we cannot create a static array to realize automatically as before.&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;#search_query&quot;&lt;/span&gt;).autocomplete(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            source: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;request, response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    url: &lt;span class=&quot;string&quot;&gt;&quot;search.php&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    data: &amp;#123;input: request.term&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    type: &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    datatype: &lt;span class=&quot;string&quot;&gt;&quot;json&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    success: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;json&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; jsonObject = jQuery.parseJSON(json);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (jsonObject.length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;checkValidate&quot;&lt;/span&gt;).innerHTML = &lt;span class=&quot;string&quot;&gt;&quot;Select a valid entry&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            response(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;checkValidate&quot;&lt;/span&gt;).innerHTML = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; data = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; jsonObject.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                data[i] = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    label: jsonObject[i].Symbol + &lt;span class=&quot;string&quot;&gt;&quot; - &quot;&lt;/span&gt; + jsonObject[i].Name + &lt;span class=&quot;string&quot;&gt;&quot; ( &quot;&lt;/span&gt; + jsonObject[i].Exchange + &lt;span class=&quot;string&quot;&gt;&quot; ) &quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    value: jsonObject[i].Symbol&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            response(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The search.php as followint&lt;br&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&quot;input&quot;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $autocomplete_check_search = &lt;span class=&quot;string&quot;&gt;&quot;http://dev.markitondemand.com/MODApis/Api/v2/Lookup/json?input=&quot;&lt;/span&gt;.$_GET[&lt;span class=&quot;string&quot;&gt;&quot;input&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $json_content = file_get_contents($autocomplete_check_search);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; $json_content;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;In this task, we use the Ajax to fetch data from server based on users’ inputs without the observation of users’. Then with the help of the jQuery UI, we can show the list for the user conveniently. With the help of jQuery UI our code is more clean and easy to manipulate. And with the help of Ajax, we can divide the web user development with the server function development. And we can keep our servers code save because the user cannot see server’s code.&lt;/p&gt;
&lt;p&gt;-&lt;a href=&quot;https://github.com/spacime/Projects/tree/master/Search%20Stock%20Data%20--%20Ajax&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1693/26393556095_c31c115dc0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;During developing the Stock Search App on the cloud server (AWS), in order to make out application be used conveniently the input will autocomplete based on the users’ input. This function can be divided into two parts, the back-end and front-end. Firstly, with the help of Ajax, the input of user will send to the server and server will fetch the information for user synchronously. This process is hidden to users. Secondly, when the front end get the data from the server, jQuery UI will show these data as a prompting list so that user can choose what they want to search. During the process, the user haven’t to press any button and the prompting message will change as the change of users’ inputs. Users can’t feel the process of data transmission between local and server. It is just like they run an application locally which is a great benefit of Ajax.&lt;br&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.byteants.com/categories/Project/"/>
    
      <category term="Web Develop" scheme="http://www.byteants.com/categories/Project/Web-Develop/"/>
    
    
      <category term="PHP" scheme="http://www.byteants.com/tags/PHP/"/>
    
      <category term="JSON" scheme="http://www.byteants.com/tags/JSON/"/>
    
      <category term="jQuery" scheme="http://www.byteants.com/tags/jQuery/"/>
    
      <category term="AJAX" scheme="http://www.byteants.com/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>Seam Carving</title>
    <link href="http://www.byteants.com/2016/04/07/SeamCarving/"/>
    <id>http://www.byteants.com/2016/04/07/SeamCarving/</id>
    <published>2016-04-07T07:00:00.000Z</published>
    <updated>2016-04-06T17:30:08.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1480/25664295713_11df0debd8_z.jpg&quot; width=&quot;640&quot; height=&quot;211&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;Seam carving (or liquid rescaling) is an algorithm for content-aware image resizing. It functions by establishing a number of seams (paths of least importance) in an image and automatically removes seams to reduce image size or inserts seams to extend it. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Seam_carving&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;The purpose of the algorithm is image retargeting, which is the problem of displaying images without distortion on media of various sizes (cell phones, projection screens) using document standards, like HTML, that already support dynamic changes in page layout and text but not images.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Minimum-Spanning-Tree&quot;&gt;&lt;a href=&quot;#Minimum-Spanning-Tree&quot; class=&quot;headerlink&quot; title=&quot;Minimum Spanning Tree&quot;&gt;&lt;/a&gt;Minimum Spanning Tree&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;A minimum spanning tree is a spanning tree of a connected, undirected graph. It connects all the vertices together with the minimal total weighting for its edges. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Minimum_spanning_tree&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;Usually we use greedy algorithm to find a minimum spanning tree from a undirected graph. A greedy algorithm is an algorithm that follows the problem solving heuristic of making the locally optimal choice at each stage with the hope of finding a global optimum.&lt;/p&gt;
&lt;p&gt;Usually there are two main greedy algorithm implementations: Kruskal’s algorithm and Prim’s algorithm. The first one finds an edge of the least possible weight that connects any two trees in the forest, and computes MST in time proportional to ElogE. While the second one build the tree one vertex at a time, from an arbitrary starting vertex, at each step adding the cheapest possible connection from the tree to another vertex, and computes MST in time proportional to ElogV.&lt;/p&gt;
&lt;h3 id=&quot;Shortest-Path&quot;&gt;&lt;a href=&quot;#Shortest-Path&quot; class=&quot;headerlink&quot; title=&quot;Shortest Path&quot;&gt;&lt;/a&gt;Shortest Path&lt;/h3&gt;&lt;p&gt;In graph theory, the shortest path problem is to find a path between two vertices in a graph such that the sum of the weights of its constituent edges is minimized. Specifically, single source shortest path is to find shortest path from one vertex s to every other vertex.&lt;/p&gt;
&lt;p&gt;Usually there are three main shortest path algorithms: Dijkstra’s Algorithm, Topological sort Algorithm and Bellman-Ford Algorithm. The first one is consider vertices in increasing order of distance from starting vertex and add vertex to tree and relax all edges pointing from that vertex. While the second one is consider vertices in topological order and relax all edges pointing from that vertex. And the third one is to repeat V times of relaxing all E edges.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  algorithm &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  restriction  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  typical case  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  worst case  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  extra space  &lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  topological sort &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  no directed cycles  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  E+V  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  E+V  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  V  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  Dijkstra &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  no negative weights  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  ElogV  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  ElogV  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  V  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  Bellman-Ford &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  no negative cycles  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  EV  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  EV  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  V  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;font size=&quot;2&quot;&gt;&lt;strong&gt;single source shortest-paths implementation: cost summary&lt;/strong&gt;&lt;/font&gt;

&lt;hr&gt;
&lt;h3 id=&quot;Project&quot;&gt;&lt;a href=&quot;#Project&quot; class=&quot;headerlink&quot; title=&quot;Project&quot;&gt;&lt;/a&gt;Project&lt;/h3&gt;&lt;p&gt;For this project, we at first calculate the energy of each pixel for the given picture, then find a vertical or horizontal seam of minimum total energy with a DFS algorithm, finally remove the seam from the image.&lt;/p&gt;
&lt;p&gt;The goal of this project is to implement 3 class:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SeamCarver&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SeamCarver&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Picture picture)&lt;/span&gt;                &lt;span class=&quot;comment&quot;&gt;// create a seam carver object based on the given picture&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Picture &lt;span class=&quot;title&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;                          &lt;span class=&quot;comment&quot;&gt;// current picture&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;                            &lt;span class=&quot;comment&quot;&gt;// width of current picture&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;                           &lt;span class=&quot;comment&quot;&gt;// height of current picture&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;  &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;energy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; y)&lt;/span&gt;               &lt;span class=&quot;comment&quot;&gt;// energy of pixel at column x and row y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] &lt;span class=&quot;title&quot;&gt;findHorizontalSeam&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;               &lt;span class=&quot;comment&quot;&gt;// sequence of indices for horizontal seam&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;   &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] &lt;span class=&quot;title&quot;&gt;findVerticalSeam&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;                 &lt;span class=&quot;comment&quot;&gt;// sequence of indices for vertical seam&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeHorizontalSeam&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] seam)&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// remove horizontal seam from current picture&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeVerticalSeam&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] seam)&lt;/span&gt;     &lt;span class=&quot;comment&quot;&gt;// remove vertical seam from current picture&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the given picture could be removed seam for multiple times, so every time to find a new seam, we should calculate the energy for each pixel of the picture again.&lt;/li&gt;
&lt;li&gt;For finding the path with minimum sum of energies, we create two 2-d arrays, storing path and sum of energies starting from the last pixel separately. And use BackTracking algorithm to add the energies and update path from last pixel to first one. Every time calculating the sumEnergy for current layer, choose the minimum sumEnergy from the next layer.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/seamCarving.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;project detail discription&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xiaofeixiawang/algorithms/tree/master/princeton_hw7/src&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1480/25664295713_11df0debd8_z.jpg&quot; width=&quot;640&quot; height=&quot;211&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=2&gt;Seam carving (or liquid rescaling) is an algorithm for content-aware image resizing. It functions by establishing a number of seams (paths of least importance) in an image and automatically removes seams to reduce image size or inserts seams to extend it. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Seam_carving&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;The purpose of the algorithm is image retargeting, which is the problem of displaying images without distortion on media of various sizes (cell phones, projection screens) using document standards, like HTML, that already support dynamic changes in page layout and text but not images.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.byteants.com/categories/Project/"/>
    
      <category term="Princeton Algorithms" scheme="http://www.byteants.com/categories/Project/Princeton-Algorithms/"/>
    
    
      <category term="Depth-First Search" scheme="http://www.byteants.com/tags/Depth-First-Search/"/>
    
      <category term="BackTracking" scheme="http://www.byteants.com/tags/BackTracking/"/>
    
  </entry>
  
  <entry>
    <title>WordNet</title>
    <link href="http://www.byteants.com/2016/04/03/WordNet/"/>
    <id>http://www.byteants.com/2016/04/03/WordNet/</id>
    <published>2016-04-03T07:00:00.000Z</published>
    <updated>2016-04-12T00:09:32.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1659/26127972192_c5a171e7a4_z.jpg&quot; width=&quot;552&quot; height=&quot;404&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;WordNet is a lexical database for the English language. It groups English words into sets of synonyms called synsets, provides short definitions and usage examples, and records a number of relations among these synonym sets or their members. WordNet can thus be seen as a combination of dictionary and thesaurus. - &lt;a href=&quot;https://en.wikipedia.org/wiki/WordNet&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;WordNet has been used for a number of different purposes in information systems, including word sense disambiguation, information retrieval, automatic text classification, automatic text summarization, machine translation and even automatic crossword puzzle generation&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Directed-Undirected-Graph&quot;&gt;&lt;a href=&quot;#Directed-Undirected-Graph&quot; class=&quot;headerlink&quot; title=&quot;Directed/Undirected Graph&quot;&gt;&lt;/a&gt;Directed/Undirected Graph&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;An undirected graph is a graph in which edges have no orientation. The edge (x, y) is identical to the edge (y, x), i.e., they are not ordered pairs, but sets {x, y} (or 2-multisets) of vertices. The maximum number of edges in an undirected graph without a loop is n(n − 1)/2. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)#Undirected_graph&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;A directed graph or digraph is a graph in which edges have orientations. It is written as an ordered pair G = (V, A) (sometimes G = (V, E)) with: V a set whose elements are called vertices, nodes, or points; A a set of ordered pairs of vertices, called arrows, directed edges (sometimes simply edges with the corresponding set named E instead of A), directed arcs, or directed lines. - &lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)#Directed_graph&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  Representation &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  Space  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  Insert edge from v to w  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  Edge from v to w  &lt;/font&gt;&lt;/th&gt;
&lt;th&gt;&lt;font size=&quot;1&quot;&gt;  Iterate over vertices pointing from v  &lt;/font&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  list of edges &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  E  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  E  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  E  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  adjacency matrix &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  V*V  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  V  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  adjacency lists &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  E+V  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  1  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  outdegree(V)  &lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font size=&quot;1&quot;&gt;  outdegree(V)  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;font size=&quot;2&quot;&gt;&lt;strong&gt;Graph Representations&lt;/strong&gt;&lt;/font&gt;


&lt;h3 id=&quot;Depth-First-Search-Breadth-First-Search&quot;&gt;&lt;a href=&quot;#Depth-First-Search-Breadth-First-Search&quot; class=&quot;headerlink&quot; title=&quot;Depth-First Search/Breadth-First Search&quot;&gt;&lt;/a&gt;Depth-First Search/Breadth-First Search&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=&quot;2&quot;&gt;Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. One starts at the root (selecting some arbitrary node as the root in the case of a graph) and explores as far as possible along each branch before backtracking - &lt;a href=&quot;https://en.wikipedia.org/wiki/Depth-first_search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;br&gt;&lt;br&gt;Breadth-first search (BFS) is an algorithm for traversing or searching tree or graph data structures. It starts at the tree root (or some arbitrary node of a graph, sometimes referred to as a ‘search key’&lt;a href=&quot;https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)#Undirected_graph&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;1&lt;/a&gt;) and explores the neighbor nodes first, before moving to the next level neighbors - &lt;a href=&quot;https://en.wikipedia.org/wiki/Breadth-first_search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;Project&quot;&gt;&lt;a href=&quot;#Project&quot; class=&quot;headerlink&quot; title=&quot;Project&quot;&gt;&lt;/a&gt;Project&lt;/h3&gt;&lt;p&gt;For this project, we use 2 hashmap to store id2noun and noun2id pairs separately, and use a Digraph class to create a digraph, use BreadthFirstDirectedPaths class to find a shortest ancestral path between two nouns in the digraph.&lt;/p&gt;
&lt;p&gt;The goal of this project is to implement 3 class:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WordNet&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// constructor takes the name of the two input files&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;WordNet&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String synsets, String hypernyms)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// returns all WordNet nouns&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Iterable&amp;lt;String&amp;gt; &lt;span class=&quot;title&quot;&gt;nouns&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// is the word a WordNet noun?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isNoun&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String word)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// distance between nounA and nounB (defined below)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String nounA, String nounB)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// a synset (second field of synsets.txt) that is the common ancestor of nounA and nounB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// in a shortest ancestral path (defined below)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;sap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String nounA, String nounB)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// do unit testing of this class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; class SAP &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// constructor takes a digraph (not necessarily a DAG)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SAP&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Digraph G)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// length of shortest ancestral path between v and w; -1 if no such path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; v, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; w)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// a common ancestor of v and w that participates in a shortest ancestral path; -1 if no such path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ancestor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; v, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; w)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// length of shortest ancestral path between any vertex in v and any vertex in w; -1 if no such path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Iterable&amp;lt;Integer&amp;gt; v, Iterable&amp;lt;Integer&amp;gt; w)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// a common ancestor that participates in shortest ancestral path; -1 if no such path&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ancestor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Iterable&amp;lt;Integer&amp;gt; v, Iterable&amp;lt;Integer&amp;gt; w)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;comment&quot;&gt;// do unit testing of this class&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; class Outcast &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Outcast&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(WordNet wordnet)&lt;/span&gt;         &lt;span class=&quot;comment&quot;&gt;// constructor takes a WordNet object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; String &lt;span class=&quot;title&quot;&gt;outcast&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] nouns)&lt;/span&gt;   &lt;span class=&quot;comment&quot;&gt;// given an array of WordNet nouns, return an outcast&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;// see test client below&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The first class is to store 2 files’ information. Use two hashmap to store synsets and use Digraph to store hypernyms.&lt;br&gt;The second class is to find the shortest ancestral paths. Use BreadthFirstDirectedPaths to find distance between two nouns, and traverse every nouns from the digraph to find a noun with minimum distance to the given 2 nouns.&lt;br&gt;The third class is to compute the sum of the distances between each noun and every other one and return a noun for which distance is maximum.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;one noun could have multiple ids and one id could have multiple nouns, so in the hashmap noun2id, the value should be a list of ids.&lt;/li&gt;
&lt;li&gt;In order to check the given file is a legal digraph, we need to use a DirectedCycle class to check if digraph has a cycle, and the number of edges should be equal or bigger than the number of vertexs.&lt;/li&gt;
&lt;li&gt;To find a noun with the minimum distance to two given nouns, there should ba a path between this noun and the two given nouns, also the distance from this noun to the two given nouns should be the smallest compared with other nouns in the digraph.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://coursera.cs.princeton.edu/algs4/assignments/wordnet.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;project detail discription&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/xiaofeixiawang/algorithms/tree/master/princeton_hw6/src&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code link&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1659/26127972192_c5a171e7a4_z.jpg&quot; width=&quot;552&quot; height=&quot;404&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;blockquote&gt;
&lt;font size=2&gt;WordNet is a lexical database for the English language. It groups English words into sets of synonyms called synsets, provides short definitions and usage examples, and records a number of relations among these synonym sets or their members. WordNet can thus be seen as a combination of dictionary and thesaurus. - &lt;a href=&quot;https://en.wikipedia.org/wiki/WordNet&quot;&gt;wikipedia&lt;/a&gt;&lt;/font&gt;

&lt;/blockquote&gt;
&lt;p&gt;WordNet has been used for a number of different purposes in information systems, including word sense disambiguation, information retrieval, automatic text classification, automatic text summarization, machine translation and even automatic crossword puzzle generation&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="Project" scheme="http://www.byteants.com/categories/Project/"/>
    
      <category term="Princeton Algorithms" scheme="http://www.byteants.com/categories/Project/Princeton-Algorithms/"/>
    
    
      <category term="Graph" scheme="http://www.byteants.com/tags/Graph/"/>
    
      <category term="Breadth-First Search" scheme="http://www.byteants.com/tags/Breadth-First-Search/"/>
    
      <category term="Directed Graph" scheme="http://www.byteants.com/tags/Directed-Graph/"/>
    
  </entry>
  
  <entry>
    <title>Build Tree from other Data Structures</title>
    <link href="http://www.byteants.com/2016/03/21/Build%20Tree/"/>
    <id>http://www.byteants.com/2016/03/21/Build Tree/</id>
    <published>2016-03-21T07:00:00.000Z</published>
    <updated>2016-03-22T05:03:54.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1559/25336741793_0edc085365.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;Tree data structure is applied generally during programming such as sorting and searching. Tree data structure even can be used in dealing with string such as prefix tree. However, we sometimes get the data is not stored as a tree, so it is normally to for us to transfer other data structures into a tree so as to handle the problem more effectively. In this article, we would talk about how transfer the sorted array and sorted list to the balanced binary search tree. Besides, we can transfer two arrays, gotten by traversing inorder and preorder or postorder. We also can build a tree from a string, where the values are split by ‘,’ and the null node is marked as ‘#’. However, we can build a tree form various data structure, which is an essential methods in algorithms.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;Build-Tree-from-Sorted-Array-and-Sorted-List&quot;&gt;&lt;a href=&quot;#Build-Tree-from-Sorted-Array-and-Sorted-List&quot; class=&quot;headerlink&quot; title=&quot;Build Tree from Sorted Array and Sorted List&quot;&gt;&lt;/a&gt;Build Tree from Sorted Array and Sorted List&lt;/h3&gt;&lt;h4 id=&quot;Build-Tree-form-Sorted-Array&quot;&gt;&lt;a href=&quot;#Build-Tree-form-Sorted-Array&quot; class=&quot;headerlink&quot; title=&quot;Build Tree form Sorted Array&quot;&gt;&lt;/a&gt;Build Tree form Sorted Array&lt;/h4&gt;&lt;p&gt;We know that if we traverse the binary search tree (BST) inorder the output value would be sorted. Base on this character we can choose the middle value as the root and the left side array as its left subtree and the right side array as the right subtree. The left side array is also a sorted array which need to transfer smaller BST, which is the exactly the same problem as the total one. So we can use divide and conquer method. The following is the detail steps in the function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Get the middle of the array make it as root. (By doing this we will ensure that half of the elements of array will be on the left side of the root and half on the right side.)&lt;/li&gt;
&lt;li&gt;Take the left half of the array, call recursively and add it to root.left.&lt;/li&gt;
&lt;li&gt;Take the right half of the array, call recursively and add it to root.right.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following picture is the process of building tree, which is a balanced tree.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1487/25664888060_3d910760f0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;Build-Tree-from-Sorted-List&quot;&gt;&lt;a href=&quot;#Build-Tree-from-Sorted-List&quot; class=&quot;headerlink&quot; title=&quot;Build Tree from Sorted List&quot;&gt;&lt;/a&gt;Build Tree from Sorted List&lt;/h4&gt;&lt;p&gt;Converting the sorted list is same as converting the sorted array to a BST. The detailed strops are as following:&lt;br&gt;Say mid is the mid­dle node in the linked list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recursively construct left subtree from start to mid-1&lt;/li&gt;
&lt;li&gt;Make the middle node as root and assign the left subtree to it.&lt;/li&gt;
&lt;li&gt;Recursively construct right subtree from mid+1 to end.&lt;/li&gt;
&lt;li&gt;Assign the right subtree to root.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; TreeNode &lt;span class=&quot;title&quot;&gt;sortedListToBST&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; start, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; end)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(start &amp;gt; end) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = (start + end) / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode left = sortedListToBST(start, mid - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode parent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; TreeNode(list.val);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    list = list.next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    parent.left = left;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TreeNode right = sortedListToBST(mid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, end);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    parent.right = right;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; parent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Build-Tree-form-Inorder-and-Preorder-or-PostOrder-Array&quot;&gt;&lt;a href=&quot;#Build-Tree-form-Inorder-and-Preorder-or-PostOrder-Array&quot; class=&quot;headerlink&quot; title=&quot;Build Tree form Inorder and Preorder or PostOrder Array&quot;&gt;&lt;/a&gt;Build Tree form Inorder and Preorder or PostOrder Array&lt;/h3&gt;&lt;p&gt;The following pictures are two examples of the inorder and postorder array and the inorder and preorder array. And show the first step we need to do. It also marks the two sub problems.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1510/25844668382_7917946bc1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1694/25336741633_ab4ac60607.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;The following is the detail steps to build tree from the inorder and postorder array:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read the last element from postorder array which is root node.&lt;/li&gt;
&lt;li&gt;Search the same element in inorder traversal, when the element is found in inorder traversal, then we can very well say that all the elements present before the node found are Left children/sub-tree and all the elements present after the node found are Right children/sub-tree of node found.&lt;/li&gt;
&lt;li&gt;Find the index of left subtree inorder and postorder array and the index of the right subtree inorder and postorder array. Building them as sub problem and recursively to deal with the sub problems.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1571/25939566926_906a2ee6a9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;One of the most important thing is that we should get the right index of the two sub problems. The following code show the input parameter of two transition with postorder array or preorder array.&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// inorder and preorder array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root.left = buildTree(preorder, preStart + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, order, orderStart, index - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root.right = buildTree(preorder, preStart + index - orderStart + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, order, index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, orderEnd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// inorder and postorder array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root.right = buildTree(postorder, postStart - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, inorder, orderStart, index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root.left = buildTree(postorder, postStart - (orderStart - index + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), inorder, index - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, orderEnd);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;In some time we need to compress the Tree into a string and then reconstruct a tree form the string. However, it is very general to come up with building tree from other data structures. You can get the realization of theses algorithms from the following github link with index 105, 106, 108, 109 and 297.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spacime/Online-Judge/tree/master/LeetCode&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github code link&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://farm2.staticflickr.com/1559/25336741793_0edc085365.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h3&gt;&lt;p&gt;Tree data structure is applied generally during programming such as sorting and searching. Tree data structure even can be used in dealing with string such as prefix tree. However, we sometimes get the data is not stored as a tree, so it is normally to for us to transfer other data structures into a tree so as to handle the problem more effectively. In this article, we would talk about how transfer the sorted array and sorted list to the balanced binary search tree. Besides, we can transfer two arrays, gotten by traversing inorder and preorder or postorder. We also can build a tree from a string, where the values are split by ‘,’ and the null node is marked as ‘#’. However, we can build a tree form various data structure, which is an essential methods in algorithms.&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="LeetCode" scheme="http://www.byteants.com/categories/LeetCode/"/>
    
    
      <category term="List" scheme="http://www.byteants.com/tags/List/"/>
    
      <category term="Binary Search Tree" scheme="http://www.byteants.com/tags/Binary-Search-Tree/"/>
    
      <category term="Tree" scheme="http://www.byteants.com/tags/Tree/"/>
    
  </entry>
  
</feed>
